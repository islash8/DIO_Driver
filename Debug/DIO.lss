
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000a2a  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000195c  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d6d  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003171  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  000036a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00003b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <main>
  7a:	0c 94 13 05 	jmp	0xa26	; 0xa26 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vInit>:
/* Inputs:  -> void																	*/
/* Outputs: -> void                                                      			*/
/************************************************************************************/

void DIO_vInit (void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRA = CONC_8BIT(DIO_u8_PIN0_INIT_DIR,  DIO_u8_PIN1_INIT_DIR,
  8a:	8a e3       	ldi	r24, 0x3A	; 58
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTA = CONC_8BIT(DIO_u8_PIN0_INIT_PORT_VAL,  DIO_u8_PIN1_INIT_PORT_VAL,
  92:	8b e3       	ldi	r24, 0x3B	; 59
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	fc 01       	movw	r30, r24
  98:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINA = CONC_8BIT(DIO_u8_PIN0_INIT_PIN_VAL,  DIO_u8_PIN1_INIT_PIN_VAL,
  9a:	89 e3       	ldi	r24, 0x39	; 57
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRB = CONC_8BIT(DIO_u8_PIN8_INIT_DIR ,  DIO_u8_PIN9_INIT_DIR,
  a2:	87 e3       	ldi	r24, 0x37	; 55
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTB = CONC_8BIT(DIO_u8_PIN8_INIT_PORT_VAL ,  DIO_u8_PIN9_INIT_PORT_VAL,
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINB = CONC_8BIT(DIO_u8_PIN8_INIT_PIN_VAL ,  DIO_u8_PIN9_INIT_PIN_VAL,
  b2:	86 e3       	ldi	r24, 0x36	; 54
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
/* -------------------------------> Port C <----------------------------------------*/
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_DDRC = CONC_8BIT(DIO_u8_PIN16_INIT_DIR,  DIO_u8_PIN17_INIT_DIR,
  ba:	84 e3       	ldi	r24, 0x34	; 52
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_DIR,  DIO_u8_PIN19_INIT_DIR,
								  DIO_u8_PIN20_INIT_DIR,  DIO_u8_PIN21_INIT_DIR,
								  DIO_u8_PIN22_INIT_DIR,  DIO_u8_PIN23_INIT_DIR);

	DIO_Register_PORTC = CONC_8BIT(DIO_u8_PIN16_INIT_PORT_VAL,  DIO_u8_PIN17_INIT_PORT_VAL,
  c2:	85 e3       	ldi	r24, 0x35	; 53
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_PORT_VAL,  DIO_u8_PIN19_INIT_PORT_VAL,
								  DIO_u8_PIN20_INIT_PORT_VAL,  DIO_u8_PIN21_INIT_PORT_VAL,
								  DIO_u8_PIN22_INIT_PORT_VAL,  DIO_u8_PIN23_INIT_PORT_VAL);

	DIO_Register_PINC = CONC_8BIT(DIO_u8_PIN16_INIT_PIN_VAL,  DIO_u8_PIN17_INIT_PIN_VAL,
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

/* -------------------------------> Port D <----------------------------------------*/
	DIO_Register_DDRD = CONC_8BIT(DIO_u8_PIN24_INIT_DIR,  DIO_u8_PIN25_INIT_DIR,
  d2:	81 e3       	ldi	r24, 0x31	; 49
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTD = CONC_8BIT(DIO_u8_PIN24_INIT_PORT_VAL,  DIO_u8_PIN25_INIT_PORT_VAL,
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2f e7       	ldi	r18, 0x7F	; 127
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PIND = CONC_8BIT(DIO_u8_PIN24_INIT_PIN_VAL,  DIO_u8_PIN25_INIT_PIN_VAL,
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	10 82       	st	Z, r1
        #define DIO_PIN31_INIT_VALUE   DIO_PIN_INIT_VAL_LOW
      #endif

/************************************************************************************/

}
  ee:	00 00       	nop
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <DIO_u8SetPinDirection>:
/*          -> Direction (copy_u8Direction) (either 0 for input or 1 for output)	*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinDirection(u8 copy_u8PinNB, u8 copy_u8Direction)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	00 d0       	rcall	.+0      	; 0xfc <DIO_u8SetPinDirection+0x6>
  fc:	0f 92       	push	r0
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	6b 83       	std	Y+3, r22	; 0x03
/*===========================>> Local variables <<==================================*/

	u8 local_u8Error  = STD_ERROR_OK; /* ----> This is used as a return value       */
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	89 83       	std	Y+1, r24	; 0x01


	/* validates the input if it's more than maximum number of pins					*/

	if(copy_u8PinNB < DIO_MAXPINNB)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	80 32       	cpi	r24, 0x20	; 32
 10e:	08 f0       	brcs	.+2      	; 0x112 <DIO_u8SetPinDirection+0x1c>
 110:	da c0       	rjmp	.+436    	; 0x2c6 <DIO_u8SetPinDirection+0x1d0>
	{
		switch (copy_u8Direction)
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	21 f0       	breq	.+8      	; 0x124 <DIO_u8SetPinDirection+0x2e>
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	09 f4       	brne	.+2      	; 0x122 <DIO_u8SetPinDirection+0x2c>
 120:	6d c0       	rjmp	.+218    	; 0x1fc <DIO_u8SetPinDirection+0x106>
 122:	ce c0       	rjmp	.+412    	; 0x2c0 <DIO_u8SetPinDirection+0x1ca>
		{
			case DIO_PIN_INPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	a8 f4       	brcc	.+42     	; 0x154 <DIO_u8SetPinDirection+0x5e>
				{
					DIO_Register_DDRA = RESET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 12a:	8a e3       	ldi	r24, 0x3A	; 58
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	28 2f       	mov	r18, r24
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	87 70       	andi	r24, 0x07	; 7
 13c:	99 27       	eor	r25, r25
 13e:	80 5a       	subi	r24, 0xA0	; 160
 140:	9f 4f       	sbci	r25, 0xFF	; 255
 142:	fc 01       	movw	r30, r24
 144:	80 81       	ld	r24, Z
 146:	80 95       	com	r24
 148:	28 23       	and	r18, r24
 14a:	8a e3       	ldi	r24, 0x3A	; 58
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 152:	bb c0       	rjmp	.+374    	; 0x2ca <DIO_u8SetPinDirection+0x1d4>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	c0 f0       	brcs	.+48     	; 0x18a <DIO_u8SetPinDirection+0x94>
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	80 31       	cpi	r24, 0x10	; 16
 15e:	a8 f4       	brcc	.+42     	; 0x18a <DIO_u8SetPinDirection+0x94>
					DIO_Register_DDRB = RESET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 160:	87 e3       	ldi	r24, 0x37	; 55
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	80 81       	ld	r24, Z
 168:	28 2f       	mov	r18, r24
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	87 70       	andi	r24, 0x07	; 7
 172:	99 27       	eor	r25, r25
 174:	80 5a       	subi	r24, 0xA0	; 160
 176:	9f 4f       	sbci	r25, 0xFF	; 255
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	80 95       	com	r24
 17e:	28 23       	and	r18, r24
 180:	87 e3       	ldi	r24, 0x37	; 55
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	38 c0       	rjmp	.+112    	; 0x1fa <DIO_u8SetPinDirection+0x104>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	80 31       	cpi	r24, 0x10	; 16
 18e:	c0 f0       	brcs	.+48     	; 0x1c0 <DIO_u8SetPinDirection+0xca>
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 31       	cpi	r24, 0x18	; 24
 194:	a8 f4       	brcc	.+42     	; 0x1c0 <DIO_u8SetPinDirection+0xca>
					DIO_Register_DDRC = RESET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	28 2f       	mov	r18, r24
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	87 70       	andi	r24, 0x07	; 7
 1a8:	99 27       	eor	r25, r25
 1aa:	80 5a       	subi	r24, 0xA0	; 160
 1ac:	9f 4f       	sbci	r25, 0xFF	; 255
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	80 95       	com	r24
 1b4:	28 23       	and	r18, r24
 1b6:	84 e3       	ldi	r24, 0x34	; 52
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
 1be:	1d c0       	rjmp	.+58     	; 0x1fa <DIO_u8SetPinDirection+0x104>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	88 31       	cpi	r24, 0x18	; 24
 1c4:	08 f4       	brcc	.+2      	; 0x1c8 <DIO_u8SetPinDirection+0xd2>
 1c6:	81 c0       	rjmp	.+258    	; 0x2ca <DIO_u8SetPinDirection+0x1d4>
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	80 32       	cpi	r24, 0x20	; 32
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <DIO_u8SetPinDirection+0xda>
 1ce:	7d c0       	rjmp	.+250    	; 0x2ca <DIO_u8SetPinDirection+0x1d4>
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 1d0:	81 e3       	ldi	r24, 0x31	; 49
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	28 2f       	mov	r18, r24
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	87 70       	andi	r24, 0x07	; 7
 1e2:	99 27       	eor	r25, r25
 1e4:	80 5a       	subi	r24, 0xA0	; 160
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	80 95       	com	r24
 1ee:	28 23       	and	r18, r24
 1f0:	81 e3       	ldi	r24, 0x31	; 49
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
				break;
 1f8:	68 c0       	rjmp	.+208    	; 0x2ca <DIO_u8SetPinDirection+0x1d4>
 1fa:	67 c0       	rjmp	.+206    	; 0x2ca <DIO_u8SetPinDirection+0x1d4>

			case DIO_PIN_OUTPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	88 30       	cpi	r24, 0x08	; 8
 200:	98 f4       	brcc	.+38     	; 0x228 <DIO_u8SetPinDirection+0x132>
				{
					DIO_Register_DDRA = SET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 202:	8a e3       	ldi	r24, 0x3A	; 58
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	30 81       	ld	r19, Z
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	88 2f       	mov	r24, r24
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	87 70       	andi	r24, 0x07	; 7
 212:	99 27       	eor	r25, r25
 214:	80 5a       	subi	r24, 0xA0	; 160
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	fc 01       	movw	r30, r24
 21a:	20 81       	ld	r18, Z
 21c:	8a e3       	ldi	r24, 0x3A	; 58
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	23 2b       	or	r18, r19
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 226:	53 c0       	rjmp	.+166    	; 0x2ce <DIO_u8SetPinDirection+0x1d8>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	b0 f0       	brcs	.+44     	; 0x25a <DIO_u8SetPinDirection+0x164>
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	80 31       	cpi	r24, 0x10	; 16
 232:	98 f4       	brcc	.+38     	; 0x25a <DIO_u8SetPinDirection+0x164>
					DIO_Register_DDRB = SET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 234:	87 e3       	ldi	r24, 0x37	; 55
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	30 81       	ld	r19, Z
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	87 70       	andi	r24, 0x07	; 7
 244:	99 27       	eor	r25, r25
 246:	80 5a       	subi	r24, 0xA0	; 160
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	fc 01       	movw	r30, r24
 24c:	20 81       	ld	r18, Z
 24e:	87 e3       	ldi	r24, 0x37	; 55
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	23 2b       	or	r18, r19
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
 258:	32 c0       	rjmp	.+100    	; 0x2be <DIO_u8SetPinDirection+0x1c8>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	80 31       	cpi	r24, 0x10	; 16
 25e:	b0 f0       	brcs	.+44     	; 0x28c <DIO_u8SetPinDirection+0x196>
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	88 31       	cpi	r24, 0x18	; 24
 264:	98 f4       	brcc	.+38     	; 0x28c <DIO_u8SetPinDirection+0x196>
					DIO_Register_DDRC = SET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 266:	84 e3       	ldi	r24, 0x34	; 52
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	30 81       	ld	r19, Z
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	88 2f       	mov	r24, r24
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	87 70       	andi	r24, 0x07	; 7
 276:	99 27       	eor	r25, r25
 278:	80 5a       	subi	r24, 0xA0	; 160
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	fc 01       	movw	r30, r24
 27e:	20 81       	ld	r18, Z
 280:	84 e3       	ldi	r24, 0x34	; 52
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	23 2b       	or	r18, r19
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
 28a:	19 c0       	rjmp	.+50     	; 0x2be <DIO_u8SetPinDirection+0x1c8>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	88 31       	cpi	r24, 0x18	; 24
 290:	f0 f0       	brcs	.+60     	; 0x2ce <DIO_u8SetPinDirection+0x1d8>
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	80 32       	cpi	r24, 0x20	; 32
 296:	d8 f4       	brcc	.+54     	; 0x2ce <DIO_u8SetPinDirection+0x1d8>
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 298:	81 e3       	ldi	r24, 0x31	; 49
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	30 81       	ld	r19, Z
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	88 2f       	mov	r24, r24
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	87 70       	andi	r24, 0x07	; 7
 2a8:	99 27       	eor	r25, r25
 2aa:	80 5a       	subi	r24, 0xA0	; 160
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 81       	ld	r18, Z
 2b2:	81 e3       	ldi	r24, 0x31	; 49
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	23 2b       	or	r18, r19
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
				break;
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <DIO_u8SetPinDirection+0x1d8>
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <DIO_u8SetPinDirection+0x1d8>

			default:
				local_u8Error = STD_ERROR_NOK;
 2c0:	19 82       	std	Y+1, r1	; 0x01
				break;
 2c2:	00 00       	nop
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <DIO_u8SetPinDirection+0x1da>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 2c6:	19 82       	std	Y+1, r1	; 0x01
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <DIO_u8SetPinDirection+0x1da>
				break;
 2ca:	00 00       	nop
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <DIO_u8SetPinDirection+0x1da>
				break;
 2ce:	00 00       	nop
	}

	return local_u8Error;
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <DIO_u8SetPinValue>:
/*          -> Value (copy_u8Value) (either 0 or 1)	                                */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinValue(u8 copy_u8PinNB, u8 copy_u8Value)
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <DIO_u8SetPinValue+0x6>
 2e4:	0f 92       	push	r0
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	8a 83       	std	Y+2, r24	; 0x02
 2ec:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	89 83       	std	Y+1, r24	; 0x01

	/* Validates the input to check whether the user enter the
	 * correct pin number, and whether he enters the right which
	 * is not bigger than upper limit.
	 */
	if(copy_u8PinNB < DIO_MAXPINNB)
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	80 32       	cpi	r24, 0x20	; 32
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <DIO_u8SetPinValue+0x1c>
 2f8:	d9 c0       	rjmp	.+434    	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
	{
		switch(copy_u8Value)
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	21 f0       	breq	.+8      	; 0x30c <DIO_u8SetPinValue+0x2e>
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	09 f4       	brne	.+2      	; 0x30a <DIO_u8SetPinValue+0x2c>
 308:	6d c0       	rjmp	.+218    	; 0x3e4 <DIO_u8SetPinValue+0x106>
 30a:	ce c0       	rjmp	.+412    	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
		{
			case DIO_PIN_LOW:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	88 30       	cpi	r24, 0x08	; 8
 310:	a8 f4       	brcc	.+42     	; 0x33c <DIO_u8SetPinValue+0x5e>
				{
					DIO_Register_PORTA = RESET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 312:	8b e3       	ldi	r24, 0x3B	; 59
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	28 2f       	mov	r18, r24
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	87 70       	andi	r24, 0x07	; 7
 324:	99 27       	eor	r25, r25
 326:	80 5a       	subi	r24, 0xA0	; 160
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	80 95       	com	r24
 330:	28 23       	and	r18, r24
 332:	8b e3       	ldi	r24, 0x3B	; 59
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 33a:	ba c0       	rjmp	.+372    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	c0 f0       	brcs	.+48     	; 0x372 <DIO_u8SetPinValue+0x94>
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	80 31       	cpi	r24, 0x10	; 16
 346:	a8 f4       	brcc	.+42     	; 0x372 <DIO_u8SetPinValue+0x94>
					DIO_Register_PORTB = RESET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 348:	88 e3       	ldi	r24, 0x38	; 56
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	28 2f       	mov	r18, r24
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	88 2f       	mov	r24, r24
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	87 70       	andi	r24, 0x07	; 7
 35a:	99 27       	eor	r25, r25
 35c:	80 5a       	subi	r24, 0xA0	; 160
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	fc 01       	movw	r30, r24
 362:	80 81       	ld	r24, Z
 364:	80 95       	com	r24
 366:	28 23       	and	r18, r24
 368:	88 e3       	ldi	r24, 0x38	; 56
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
 370:	38 c0       	rjmp	.+112    	; 0x3e2 <DIO_u8SetPinValue+0x104>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	80 31       	cpi	r24, 0x10	; 16
 376:	c0 f0       	brcs	.+48     	; 0x3a8 <DIO_u8SetPinValue+0xca>
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	88 31       	cpi	r24, 0x18	; 24
 37c:	a8 f4       	brcc	.+42     	; 0x3a8 <DIO_u8SetPinValue+0xca>
					DIO_Register_PORTC = RESET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 37e:	85 e3       	ldi	r24, 0x35	; 53
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	28 2f       	mov	r18, r24
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	87 70       	andi	r24, 0x07	; 7
 390:	99 27       	eor	r25, r25
 392:	80 5a       	subi	r24, 0xA0	; 160
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	fc 01       	movw	r30, r24
 398:	80 81       	ld	r24, Z
 39a:	80 95       	com	r24
 39c:	28 23       	and	r18, r24
 39e:	85 e3       	ldi	r24, 0x35	; 53
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18
 3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <DIO_u8SetPinValue+0x104>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	88 31       	cpi	r24, 0x18	; 24
 3ac:	08 f4       	brcc	.+2      	; 0x3b0 <DIO_u8SetPinValue+0xd2>
 3ae:	80 c0       	rjmp	.+256    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	80 32       	cpi	r24, 0x20	; 32
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <DIO_u8SetPinValue+0xda>
 3b6:	7c c0       	rjmp	.+248    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 3b8:	82 e3       	ldi	r24, 0x32	; 50
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	80 81       	ld	r24, Z
 3c0:	28 2f       	mov	r18, r24
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	87 70       	andi	r24, 0x07	; 7
 3ca:	99 27       	eor	r25, r25
 3cc:	80 5a       	subi	r24, 0xA0	; 160
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	fc 01       	movw	r30, r24
 3d2:	80 81       	ld	r24, Z
 3d4:	80 95       	com	r24
 3d6:	28 23       	and	r18, r24
 3d8:	82 e3       	ldi	r24, 0x32	; 50
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
				break;
 3e0:	67 c0       	rjmp	.+206    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
 3e2:	66 c0       	rjmp	.+204    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>

			case DIO_PIN_HIGH:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	88 30       	cpi	r24, 0x08	; 8
 3e8:	98 f4       	brcc	.+38     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
				{
					DIO_Register_PORTA = SET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 3ea:	8b e3       	ldi	r24, 0x3B	; 59
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	fc 01       	movw	r30, r24
 3f0:	30 81       	ld	r19, Z
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	87 70       	andi	r24, 0x07	; 7
 3fa:	99 27       	eor	r25, r25
 3fc:	80 5a       	subi	r24, 0xA0	; 160
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	fc 01       	movw	r30, r24
 402:	20 81       	ld	r18, Z
 404:	8b e3       	ldi	r24, 0x3B	; 59
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	23 2b       	or	r18, r19
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 40e:	52 c0       	rjmp	.+164    	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	88 30       	cpi	r24, 0x08	; 8
 414:	b0 f0       	brcs	.+44     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	80 31       	cpi	r24, 0x10	; 16
 41a:	98 f4       	brcc	.+38     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
					DIO_Register_PORTB = SET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 41c:	88 e3       	ldi	r24, 0x38	; 56
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	fc 01       	movw	r30, r24
 422:	30 81       	ld	r19, Z
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	87 70       	andi	r24, 0x07	; 7
 42c:	99 27       	eor	r25, r25
 42e:	80 5a       	subi	r24, 0xA0	; 160
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	fc 01       	movw	r30, r24
 434:	20 81       	ld	r18, Z
 436:	88 e3       	ldi	r24, 0x38	; 56
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	23 2b       	or	r18, r19
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18
 440:	32 c0       	rjmp	.+100    	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	80 31       	cpi	r24, 0x10	; 16
 446:	b0 f0       	brcs	.+44     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	88 31       	cpi	r24, 0x18	; 24
 44c:	98 f4       	brcc	.+38     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
					DIO_Register_PORTC = SET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 44e:	85 e3       	ldi	r24, 0x35	; 53
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	30 81       	ld	r19, Z
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	88 2f       	mov	r24, r24
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	87 70       	andi	r24, 0x07	; 7
 45e:	99 27       	eor	r25, r25
 460:	80 5a       	subi	r24, 0xA0	; 160
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	fc 01       	movw	r30, r24
 466:	20 81       	ld	r18, Z
 468:	85 e3       	ldi	r24, 0x35	; 53
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	23 2b       	or	r18, r19
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
 472:	19 c0       	rjmp	.+50     	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	88 31       	cpi	r24, 0x18	; 24
 478:	e8 f0       	brcs	.+58     	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
 47a:	8a 81       	ldd	r24, Y+2	; 0x02
 47c:	80 32       	cpi	r24, 0x20	; 32
 47e:	d0 f4       	brcc	.+52     	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 480:	82 e3       	ldi	r24, 0x32	; 50
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	fc 01       	movw	r30, r24
 486:	30 81       	ld	r19, Z
 488:	8a 81       	ldd	r24, Y+2	; 0x02
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	87 70       	andi	r24, 0x07	; 7
 490:	99 27       	eor	r25, r25
 492:	80 5a       	subi	r24, 0xA0	; 160
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	fc 01       	movw	r30, r24
 498:	20 81       	ld	r18, Z
 49a:	82 e3       	ldi	r24, 0x32	; 50
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	23 2b       	or	r18, r19
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
				break;
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
 4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>

			default:
				local_u8Error = STD_ERROR_NOK;
 4a8:	19 82       	std	Y+1, r1	; 0x01
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
		}

	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 4ac:	19 82       	std	Y+1, r1	; 0x01
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
				break;
 4b0:	00 00       	nop
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
				break;
 4b4:	00 00       	nop
	}

	return local_u8Error;
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <DIO_u8ReadPinValue>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPinValue(u8 copy_u8PinNB, u8 * copy_pu8Value)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <DIO_u8ReadPinValue+0x6>
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <DIO_u8ReadPinValue+0x8>
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	8a 83       	std	Y+2, r24	; 0x02
 4d2:	7c 83       	std	Y+4, r23	; 0x04
 4d4:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PinNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	80 32       	cpi	r24, 0x20	; 32
 4de:	08 f0       	brcs	.+2      	; 0x4e2 <DIO_u8ReadPinValue+0x1e>
 4e0:	60 c0       	rjmp	.+192    	; 0x5a2 <DIO_u8ReadPinValue+0xde>
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	9c 81       	ldd	r25, Y+4	; 0x04
 4e6:	89 2b       	or	r24, r25
 4e8:	09 f4       	brne	.+2      	; 0x4ec <DIO_u8ReadPinValue+0x28>
 4ea:	5b c0       	rjmp	.+182    	; 0x5a2 <DIO_u8ReadPinValue+0xde>
	{
		if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	88 f4       	brcc	.+34     	; 0x514 <DIO_u8ReadPinValue+0x50>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINA, copy_u8PinNB);
 4f2:	89 e3       	ldi	r24, 0x39	; 57
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 81       	ld	r18, Z
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	88 2f       	mov	r24, r24
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	80 5a       	subi	r24, 0xA0	; 160
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	fc 01       	movw	r30, r24
 506:	80 81       	ld	r24, Z
 508:	28 23       	and	r18, r24
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	9c 81       	ldd	r25, Y+4	; 0x04
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
 512:	44 c0       	rjmp	.+136    	; 0x59c <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	88 30       	cpi	r24, 0x08	; 8
 518:	a0 f0       	brcs	.+40     	; 0x542 <DIO_u8ReadPinValue+0x7e>
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	80 31       	cpi	r24, 0x10	; 16
 51e:	88 f4       	brcc	.+34     	; 0x542 <DIO_u8ReadPinValue+0x7e>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINB, copy_u8PinNB);
 520:	86 e3       	ldi	r24, 0x36	; 54
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	fc 01       	movw	r30, r24
 526:	20 81       	ld	r18, Z
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	88 2f       	mov	r24, r24
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	80 5a       	subi	r24, 0xA0	; 160
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	fc 01       	movw	r30, r24
 534:	80 81       	ld	r24, Z
 536:	28 23       	and	r18, r24
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	9c 81       	ldd	r25, Y+4	; 0x04
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
 540:	2d c0       	rjmp	.+90     	; 0x59c <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	80 31       	cpi	r24, 0x10	; 16
 546:	a0 f0       	brcs	.+40     	; 0x570 <DIO_u8ReadPinValue+0xac>
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	88 31       	cpi	r24, 0x18	; 24
 54c:	88 f4       	brcc	.+34     	; 0x570 <DIO_u8ReadPinValue+0xac>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINC, copy_u8PinNB);
 54e:	83 e3       	ldi	r24, 0x33	; 51
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	fc 01       	movw	r30, r24
 554:	20 81       	ld	r18, Z
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	88 2f       	mov	r24, r24
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	80 5a       	subi	r24, 0xA0	; 160
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	fc 01       	movw	r30, r24
 562:	80 81       	ld	r24, Z
 564:	28 23       	and	r18, r24
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	9c 81       	ldd	r25, Y+4	; 0x04
 56a:	fc 01       	movw	r30, r24
 56c:	20 83       	st	Z, r18
 56e:	16 c0       	rjmp	.+44     	; 0x59c <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	88 31       	cpi	r24, 0x18	; 24
 574:	98 f0       	brcs	.+38     	; 0x59c <DIO_u8ReadPinValue+0xd8>
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	80 32       	cpi	r24, 0x20	; 32
 57a:	80 f4       	brcc	.+32     	; 0x59c <DIO_u8ReadPinValue+0xd8>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PIND, copy_u8PinNB);
 57c:	80 e3       	ldi	r24, 0x30	; 48
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	20 81       	ld	r18, Z
 584:	8a 81       	ldd	r24, Y+2	; 0x02
 586:	88 2f       	mov	r24, r24
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	80 5a       	subi	r24, 0xA0	; 160
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	fc 01       	movw	r30, r24
 590:	80 81       	ld	r24, Z
 592:	28 23       	and	r18, r24
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	9c 81       	ldd	r25, Y+4	; 0x04
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
		}
		local_u8Error = STD_ERROR_OK;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <DIO_u8ReadPinValue+0xe0>
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 5a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
}
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <DIO_u8SetPortDirection>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortDirection(u8 copy_u8PortNB, u8 copy_u8Direction)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <DIO_u8SetPortDirection+0x6>
 5ba:	0f 92       	push	r0
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	8a 83       	std	Y+2, r24	; 0x02
 5c2:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortNB < DIO_MAXPORTNB)
 5c8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ca:	84 30       	cpi	r24, 0x04	; 4
 5cc:	08 f0       	brcs	.+2      	; 0x5d0 <DIO_u8SetPortDirection+0x1c>
 5ce:	57 c0       	rjmp	.+174    	; 0x67e <DIO_u8SetPortDirection+0xca>
	{
		switch(copy_u8Direction)
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	21 f0       	breq	.+8      	; 0x5e2 <DIO_u8SetPortDirection+0x2e>
 5da:	8f 3f       	cpi	r24, 0xFF	; 255
 5dc:	91 05       	cpc	r25, r1
 5de:	09 f1       	breq	.+66     	; 0x622 <DIO_u8SetPortDirection+0x6e>
 5e0:	4b c0       	rjmp	.+150    	; 0x678 <DIO_u8SetPortDirection+0xc4>
		{
			case DIO_PORT_INPUT:
				if(copy_u8PortNB == DIO_PORTA)
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	88 23       	and	r24, r24
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <DIO_u8SetPortDirection+0x3e>
				{
					DIO_Register_DDRA = RESET_PORT(DIO_Register_DDRA);
 5e8:	8a e3       	ldi	r24, 0x3A	; 58
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	fc 01       	movw	r30, r24
 5ee:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
				}
				break;
 5f0:	48 c0       	rjmp	.+144    	; 0x682 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTB)
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	29 f4       	brne	.+10     	; 0x602 <DIO_u8SetPortDirection+0x4e>
					DIO_Register_DDRB = RESET_PORT(DIO_Register_DDRB);
 5f8:	87 e3       	ldi	r24, 0x37	; 55
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	fc 01       	movw	r30, r24
 5fe:	10 82       	st	Z, r1
				break;
 600:	40 c0       	rjmp	.+128    	; 0x682 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTC)
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	82 30       	cpi	r24, 0x02	; 2
 606:	29 f4       	brne	.+10     	; 0x612 <DIO_u8SetPortDirection+0x5e>
					DIO_Register_DDRC = RESET_PORT(DIO_Register_DDRC);
 608:	84 e3       	ldi	r24, 0x34	; 52
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	fc 01       	movw	r30, r24
 60e:	10 82       	st	Z, r1
				break;
 610:	38 c0       	rjmp	.+112    	; 0x682 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTD)
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	a9 f5       	brne	.+106    	; 0x682 <DIO_u8SetPortDirection+0xce>
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
 618:	81 e3       	ldi	r24, 0x31	; 49
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	fc 01       	movw	r30, r24
 61e:	10 82       	st	Z, r1
				break;
 620:	30 c0       	rjmp	.+96     	; 0x682 <DIO_u8SetPortDirection+0xce>

			case DIO_PORT_OUTPUT:
				switch (copy_u8PortNB)
 622:	8a 81       	ldd	r24, Y+2	; 0x02
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	91 05       	cpc	r25, r1
 62c:	91 f0       	breq	.+36     	; 0x652 <DIO_u8SetPortDirection+0x9e>
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	91 05       	cpc	r25, r1
 632:	1c f4       	brge	.+6      	; 0x63a <DIO_u8SetPortDirection+0x86>
 634:	89 2b       	or	r24, r25
 636:	39 f0       	breq	.+14     	; 0x646 <DIO_u8SetPortDirection+0x92>
					break;
				case DIO_PORTD:
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
					break;
				}
				break;
 638:	25 c0       	rjmp	.+74     	; 0x684 <DIO_u8SetPortDirection+0xd0>
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	91 05       	cpc	r25, r1
 63e:	79 f0       	breq	.+30     	; 0x65e <DIO_u8SetPortDirection+0xaa>
 640:	03 97       	sbiw	r24, 0x03	; 3
 642:	99 f0       	breq	.+38     	; 0x66a <DIO_u8SetPortDirection+0xb6>
 644:	1f c0       	rjmp	.+62     	; 0x684 <DIO_u8SetPortDirection+0xd0>
					DIO_Register_DDRA = SET_PORT(DIO_Register_DDRA);
 646:	8a e3       	ldi	r24, 0x3A	; 58
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	fc 01       	movw	r30, r24
 64e:	20 83       	st	Z, r18
					break;
 650:	12 c0       	rjmp	.+36     	; 0x676 <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRB = SET_PORT(DIO_Register_DDRB);
 652:	87 e3       	ldi	r24, 0x37	; 55
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	2f ef       	ldi	r18, 0xFF	; 255
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
					break;
 65c:	0c c0       	rjmp	.+24     	; 0x676 <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRC = SET_PORT(DIO_Register_DDRC);
 65e:	84 e3       	ldi	r24, 0x34	; 52
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	fc 01       	movw	r30, r24
 666:	20 83       	st	Z, r18
					break;
 668:	06 c0       	rjmp	.+12     	; 0x676 <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
 66a:	81 e3       	ldi	r24, 0x31	; 49
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	fc 01       	movw	r30, r24
 672:	20 83       	st	Z, r18
					break;
 674:	00 00       	nop
				break;
 676:	06 c0       	rjmp	.+12     	; 0x684 <DIO_u8SetPortDirection+0xd0>
			default:
				local_u8Error = STD_ERROR_NOK;
 678:	19 82       	std	Y+1, r1	; 0x01
				break;
 67a:	00 00       	nop
 67c:	03 c0       	rjmp	.+6      	; 0x684 <DIO_u8SetPortDirection+0xd0>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 67e:	19 82       	std	Y+1, r1	; 0x01
 680:	01 c0       	rjmp	.+2      	; 0x684 <DIO_u8SetPortDirection+0xd0>
				break;
 682:	00 00       	nop
	}

	return local_u8Error;
 684:	89 81       	ldd	r24, Y+1	; 0x01
}
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <DIO_u8SetPortValue>:
/*          -> Value (copy_u8Value) (from 0x00 till 0xFF)                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortValue(u8 copy_u8PortNB, u8 copy_pu8Value)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	00 d0       	rcall	.+0      	; 0x698 <DIO_u8SetPortValue+0x6>
 698:	0f 92       	push	r0
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
 69e:	8a 83       	std	Y+2, r24	; 0x02
 6a0:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	89 83       	std	Y+1, r24	; 0x01

	if( copy_u8PortNB < DIO_MAXPORTNB )
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	84 30       	cpi	r24, 0x04	; 4
 6aa:	08 f0       	brcs	.+2      	; 0x6ae <DIO_u8SetPortValue+0x1c>
 6ac:	4f c0       	rjmp	.+158    	; 0x74c <DIO_u8SetPortValue+0xba>
	{
		switch(copy_pu8Value)
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	88 2f       	mov	r24, r24
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	00 97       	sbiw	r24, 0x00	; 0
 6b6:	21 f0       	breq	.+8      	; 0x6c0 <DIO_u8SetPortValue+0x2e>
 6b8:	8f 3f       	cpi	r24, 0xFF	; 255
 6ba:	91 05       	cpc	r25, r1
 6bc:	09 f1       	breq	.+66     	; 0x700 <DIO_u8SetPortValue+0x6e>
 6be:	44 c0       	rjmp	.+136    	; 0x748 <DIO_u8SetPortValue+0xb6>
		{
			case DIO_PORT_LOW:
				if(copy_u8PortNB == DIO_PORTA)
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	88 23       	and	r24, r24
 6c4:	29 f4       	brne	.+10     	; 0x6d0 <DIO_u8SetPortValue+0x3e>
				{
					DIO_Register_PORTA = RESET_PORT(DIO_Register_PORTA);
 6c6:	8b e3       	ldi	r24, 0x3B	; 59
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	fc 01       	movw	r30, r24
 6cc:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
				}
				break;
 6ce:	40 c0       	rjmp	.+128    	; 0x750 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTB)
 6d0:	8a 81       	ldd	r24, Y+2	; 0x02
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <DIO_u8SetPortValue+0x4e>
					DIO_Register_PORTB = RESET_PORT(DIO_Register_PORTB);
 6d6:	88 e3       	ldi	r24, 0x38	; 56
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fc 01       	movw	r30, r24
 6dc:	10 82       	st	Z, r1
				break;
 6de:	38 c0       	rjmp	.+112    	; 0x750 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTC)
 6e0:	8a 81       	ldd	r24, Y+2	; 0x02
 6e2:	82 30       	cpi	r24, 0x02	; 2
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <DIO_u8SetPortValue+0x5e>
					DIO_Register_PORTC = RESET_PORT(DIO_Register_PORTC);
 6e6:	85 e3       	ldi	r24, 0x35	; 53
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	fc 01       	movw	r30, r24
 6ec:	10 82       	st	Z, r1
				break;
 6ee:	30 c0       	rjmp	.+96     	; 0x750 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTD)
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	69 f5       	brne	.+90     	; 0x750 <DIO_u8SetPortValue+0xbe>
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
 6f6:	82 e3       	ldi	r24, 0x32	; 50
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	fc 01       	movw	r30, r24
 6fc:	10 82       	st	Z, r1
				break;
 6fe:	28 c0       	rjmp	.+80     	; 0x750 <DIO_u8SetPortValue+0xbe>

			case DIO_PORT_OUTPUT:
				if(copy_u8PortNB == DIO_PORTA)
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	88 23       	and	r24, r24
 704:	31 f4       	brne	.+12     	; 0x712 <DIO_u8SetPortValue+0x80>
				{
					DIO_Register_PORTA = SET_PORT(DIO_Register_PORTA);
 706:	8b e3       	ldi	r24, 0x3B	; 59
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	2f ef       	ldi	r18, 0xFF	; 255
 70c:	fc 01       	movw	r30, r24
 70e:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
				}
				break;
 710:	21 c0       	rjmp	.+66     	; 0x754 <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTB)
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	31 f4       	brne	.+12     	; 0x724 <DIO_u8SetPortValue+0x92>
					DIO_Register_PORTB = SET_PORT(DIO_Register_PORTB);
 718:	88 e3       	ldi	r24, 0x38	; 56
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	2f ef       	ldi	r18, 0xFF	; 255
 71e:	fc 01       	movw	r30, r24
 720:	20 83       	st	Z, r18
				break;
 722:	18 c0       	rjmp	.+48     	; 0x754 <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTC)
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	31 f4       	brne	.+12     	; 0x736 <DIO_u8SetPortValue+0xa4>
					DIO_Register_PORTC = SET_PORT(DIO_Register_PORTC);
 72a:	85 e3       	ldi	r24, 0x35	; 53
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	2f ef       	ldi	r18, 0xFF	; 255
 730:	fc 01       	movw	r30, r24
 732:	20 83       	st	Z, r18
				break;
 734:	0f c0       	rjmp	.+30     	; 0x754 <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTD)
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	61 f4       	brne	.+24     	; 0x754 <DIO_u8SetPortValue+0xc2>
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
 73c:	82 e3       	ldi	r24, 0x32	; 50
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
				break;
 746:	06 c0       	rjmp	.+12     	; 0x754 <DIO_u8SetPortValue+0xc2>

			default:
				local_u8Error = STD_ERROR_NOK;
 748:	19 82       	std	Y+1, r1	; 0x01
 74a:	05 c0       	rjmp	.+10     	; 0x756 <DIO_u8SetPortValue+0xc4>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 74c:	19 82       	std	Y+1, r1	; 0x01
 74e:	03 c0       	rjmp	.+6      	; 0x756 <DIO_u8SetPortValue+0xc4>
				break;
 750:	00 00       	nop
 752:	01 c0       	rjmp	.+2      	; 0x756 <DIO_u8SetPortValue+0xc4>
				break;
 754:	00 00       	nop
	}

	return local_u8Error;
 756:	89 81       	ldd	r24, Y+1	; 0x01
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <DIO_u8ReadPortValue>:
/*          -> Location (* copy_pu8Value)                                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPortValue(u8 copy_u8PortNB, u8 * copy_pu8Value)
{
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	00 d0       	rcall	.+0      	; 0x76a <DIO_u8ReadPortValue+0x6>
 76a:	00 d0       	rcall	.+0      	; 0x76c <DIO_u8ReadPortValue+0x8>
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	8a 83       	std	Y+2, r24	; 0x02
 772:	7c 83       	std	Y+4, r23	; 0x04
 774:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PortNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	80 32       	cpi	r24, 0x20	; 32
 77e:	b0 f5       	brcc	.+108    	; 0x7ec <DIO_u8ReadPortValue+0x88>
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	9c 81       	ldd	r25, Y+4	; 0x04
 784:	89 2b       	or	r24, r25
 786:	91 f1       	breq	.+100    	; 0x7ec <DIO_u8ReadPortValue+0x88>
		{
			if(copy_u8PortNB == DIO_PORTA)
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	88 23       	and	r24, r24
 78c:	49 f4       	brne	.+18     	; 0x7a0 <DIO_u8ReadPortValue+0x3c>
			{
				GET_PORT(DIO_Register_PINA, * copy_pu8Value);
 78e:	89 e3       	ldi	r24, 0x39	; 57
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	fc 01       	movw	r30, r24
 794:	20 81       	ld	r18, Z
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	9c 81       	ldd	r25, Y+4	; 0x04
 79a:	fc 01       	movw	r30, r24
 79c:	20 83       	st	Z, r18
 79e:	23 c0       	rjmp	.+70     	; 0x7e6 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTB)
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	49 f4       	brne	.+18     	; 0x7b8 <DIO_u8ReadPortValue+0x54>
			{
				GET_PORT(DIO_Register_PINB, * copy_pu8Value);
 7a6:	86 e3       	ldi	r24, 0x36	; 54
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	fc 01       	movw	r30, r24
 7ac:	20 81       	ld	r18, Z
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	9c 81       	ldd	r25, Y+4	; 0x04
 7b2:	fc 01       	movw	r30, r24
 7b4:	20 83       	st	Z, r18
 7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTC)
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	82 30       	cpi	r24, 0x02	; 2
 7bc:	49 f4       	brne	.+18     	; 0x7d0 <DIO_u8ReadPortValue+0x6c>
			{
				GET_PORT(DIO_Register_PINC, * copy_pu8Value);
 7be:	83 e3       	ldi	r24, 0x33	; 51
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 81       	ld	r18, Z
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ca:	fc 01       	movw	r30, r24
 7cc:	20 83       	st	Z, r18
 7ce:	0b c0       	rjmp	.+22     	; 0x7e6 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTA)
 7d0:	8a 81       	ldd	r24, Y+2	; 0x02
 7d2:	88 23       	and	r24, r24
 7d4:	41 f4       	brne	.+16     	; 0x7e6 <DIO_u8ReadPortValue+0x82>
			{
				GET_PORT(DIO_Register_PIND, * copy_pu8Value);
 7d6:	80 e3       	ldi	r24, 0x30	; 48
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	fc 01       	movw	r30, r24
 7dc:	20 81       	ld	r18, Z
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	9c 81       	ldd	r25, Y+4	; 0x04
 7e2:	fc 01       	movw	r30, r24
 7e4:	20 83       	st	Z, r18
			}
			local_u8Error = STD_ERROR_OK;
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	89 83       	std	Y+1, r24	; 0x01
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <DIO_u8ReadPortValue+0x8a>
		}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 7ec:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
}
 7f0:	0f 90       	pop	r0
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	0f 90       	pop	r0
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <Lib_vDelayMs>:
/*  input 		-> Time value of delay -> copy_u16time              */
/*  output		-> N/A											    */
/********************************************************************/

void Lib_vDelayMs(u16 copy_u16time)
{
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	2a 97       	sbiw	r28, 0x0a	; 10
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	f8 94       	cli
 80c:	de bf       	out	0x3e, r29	; 62
 80e:	0f be       	out	0x3f, r0	; 63
 810:	cd bf       	out	0x3d, r28	; 61
 812:	9a 87       	std	Y+10, r25	; 0x0a
 814:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_CountNumber;
	/*--------------------------------------------------------------*/

	/*----------------------main implementation---------------------*/

	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 816:	1d 82       	std	Y+5, r1	; 0x05
 818:	1e 82       	std	Y+6, r1	; 0x06
 81a:	1f 82       	std	Y+7, r1	; 0x07
 81c:	18 86       	std	Y+8, r1	; 0x08
 81e:	28 c0       	rjmp	.+80     	; 0x870 <__stack+0x11>
		/*----------------------------------------------------------*/
		/* outer loop which runs multiple of 1ms					*/
		/* -> lower limit: 0										*/
		/* -> upper limit: copy_u16time 						    */
		/*----------------------------------------------------------*/
		for(Local_InsideLoopCounter = NULL; Local_InsideLoopCounter < LIB_U8_UPPER_THRESHOLD ; Local_InsideLoopCounter++)
 820:	19 82       	std	Y+1, r1	; 0x01
 822:	1a 82       	std	Y+2, r1	; 0x02
 824:	1b 82       	std	Y+3, r1	; 0x03
 826:	1c 82       	std	Y+4, r1	; 0x04
 828:	0f c0       	rjmp	.+30     	; 0x848 <Lib_vDelayMs+0x4a>
	...
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	9a 81       	ldd	r25, Y+2	; 0x02
 836:	ab 81       	ldd	r26, Y+3	; 0x03
 838:	bc 81       	ldd	r27, Y+4	; 0x04
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	a1 1d       	adc	r26, r1
 83e:	b1 1d       	adc	r27, r1
 840:	89 83       	std	Y+1, r24	; 0x01
 842:	9a 83       	std	Y+2, r25	; 0x02
 844:	ab 83       	std	Y+3, r26	; 0x03
 846:	bc 83       	std	Y+4, r27	; 0x04
 848:	89 81       	ldd	r24, Y+1	; 0x01
 84a:	9a 81       	ldd	r25, Y+2	; 0x02
 84c:	ab 81       	ldd	r26, Y+3	; 0x03
 84e:	bc 81       	ldd	r27, Y+4	; 0x04
 850:	80 3d       	cpi	r24, 0xD0	; 208
 852:	91 05       	cpc	r25, r1
 854:	a1 05       	cpc	r26, r1
 856:	b1 05       	cpc	r27, r1
 858:	40 f3       	brcs	.-48     	; 0x82a <Lib_vDelayMs+0x2c>
	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 85a:	8d 81       	ldd	r24, Y+5	; 0x05
 85c:	9e 81       	ldd	r25, Y+6	; 0x06
 85e:	af 81       	ldd	r26, Y+7	; 0x07
 860:	b8 85       	ldd	r27, Y+8	; 0x08
 862:	01 96       	adiw	r24, 0x01	; 1
 864:	a1 1d       	adc	r26, r1
 866:	b1 1d       	adc	r27, r1
 868:	8d 83       	std	Y+5, r24	; 0x05
 86a:	9e 83       	std	Y+6, r25	; 0x06
 86c:	af 83       	std	Y+7, r26	; 0x07
 86e:	b8 87       	std	Y+8, r27	; 0x08
 870:	89 85       	ldd	r24, Y+9	; 0x09
 872:	9a 85       	ldd	r25, Y+10	; 0x0a
 874:	cc 01       	movw	r24, r24
 876:	a0 e0       	ldi	r26, 0x00	; 0
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	2d 81       	ldd	r18, Y+5	; 0x05
 87c:	3e 81       	ldd	r19, Y+6	; 0x06
 87e:	4f 81       	ldd	r20, Y+7	; 0x07
 880:	58 85       	ldd	r21, Y+8	; 0x08
 882:	28 17       	cp	r18, r24
 884:	39 07       	cpc	r19, r25
 886:	4a 07       	cpc	r20, r26
 888:	5b 07       	cpc	r21, r27
 88a:	50 f2       	brcs	.-108    	; 0x820 <Lib_vDelayMs+0x22>
			asm("nop");
			asm("nop");
		}
	}

}
 88c:	00 00       	nop
 88e:	2a 96       	adiw	r28, 0x0a	; 10
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	f8 94       	cli
 894:	de bf       	out	0x3e, r29	; 62
 896:	0f be       	out	0x3f, r0	; 63
 898:	cd bf       	out	0x3d, r28	; 61
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <Lib_vDelayUs>:
/*				 the given input value of time in microseconds  */
/*  input 		-> Time value of delay                          */
/*  output		-> N/A											*/
/****************************************************************/
void Lib_vDelayUs(u16 copy_u16time)
{
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	00 d0       	rcall	.+0      	; 0x8a6 <Lib_vDelayUs+0x6>
 8a6:	00 d0       	rcall	.+0      	; 0x8a8 <Lib_vDelayUs+0x8>
 8a8:	cd b7       	in	r28, 0x3d	; 61
 8aa:	de b7       	in	r29, 0x3e	; 62
 8ac:	9c 83       	std	Y+4, r25	; 0x04
 8ae:	8b 83       	std	Y+3, r24	; 0x03
	/* this formula is used to calculate T1, T2, T3, then       */
	/* then calculate the number of iterations needed to 		*/
	/* generate the required delay in microseconds              */
	/*----------------------------------------------------------*/

	u16 local_CountNumber = (copy_u16time - LIB_U8_TOTAL_CALCULATED) / LIB_U8_AVG_TIME_PER_ITERATION;
 8b0:	8b 81       	ldd	r24, Y+3	; 0x03
 8b2:	9c 81       	ldd	r25, Y+4	; 0x04
 8b4:	45 97       	sbiw	r24, 0x15	; 21
 8b6:	9c 01       	movw	r18, r24
 8b8:	a9 e8       	ldi	r26, 0x89	; 137
 8ba:	b8 e8       	ldi	r27, 0x88	; 136
 8bc:	0e 94 04 05 	call	0xa08	; 0xa08 <__umulhisi3>
 8c0:	96 95       	lsr	r25
 8c2:	87 95       	ror	r24
 8c4:	96 95       	lsr	r25
 8c6:	87 95       	ror	r24
 8c8:	96 95       	lsr	r25
 8ca:	87 95       	ror	r24
 8cc:	9a 83       	std	Y+2, r25	; 0x02
 8ce:	89 83       	std	Y+1, r24	; 0x01

	for(;local_CountNumber > NULL; local_CountNumber--)
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <Lib_vDelayUs+0x3e>
	{
			asm("nop");
 8d2:	00 00       	nop
	for(;local_CountNumber > NULL; local_CountNumber--)
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	9a 81       	ldd	r25, Y+2	; 0x02
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	9a 83       	std	Y+2, r25	; 0x02
 8dc:	89 83       	std	Y+1, r24	; 0x01
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	9a 81       	ldd	r25, Y+2	; 0x02
 8e2:	89 2b       	or	r24, r25
 8e4:	b1 f7       	brne	.-20     	; 0x8d2 <Lib_vDelayUs+0x32>
	}
}
 8e6:	00 00       	nop
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	0f 90       	pop	r0
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <main>:
#include "STD_Types.h"
#include "Lib_Delay.h"
#include "DIO_Interface.h"

void main (void)
{
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPortDirection(DIO_PORTD, DIO_PORT_OUTPUT);
 8fe:	6f ef       	ldi	r22, 0xFF	; 255
 900:	83 e0       	ldi	r24, 0x03	; 3
 902:	0e 94 da 02 	call	0x5b4	; 0x5b4 <DIO_u8SetPortDirection>
		while (1)
		{
			DIO_u8SetPinValue(DIO_PIN24, DIO_PIN_HIGH);
 906:	61 e0       	ldi	r22, 0x01	; 1
 908:	88 e1       	ldi	r24, 0x18	; 24
 90a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 90e:	84 ef       	ldi	r24, 0xF4	; 244
 910:	91 e0       	ldi	r25, 0x01	; 1
 912:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN24, DIO_PIN_LOW);
 916:	60 e0       	ldi	r22, 0x00	; 0
 918:	88 e1       	ldi	r24, 0x18	; 24
 91a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 91e:	84 ef       	ldi	r24, 0xF4	; 244
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN25, DIO_PIN_HIGH);
 926:	61 e0       	ldi	r22, 0x01	; 1
 928:	89 e1       	ldi	r24, 0x19	; 25
 92a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 92e:	84 ef       	ldi	r24, 0xF4	; 244
 930:	91 e0       	ldi	r25, 0x01	; 1
 932:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN25, DIO_PIN_LOW);
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	89 e1       	ldi	r24, 0x19	; 25
 93a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 93e:	84 ef       	ldi	r24, 0xF4	; 244
 940:	91 e0       	ldi	r25, 0x01	; 1
 942:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN26, DIO_PIN_HIGH);
 946:	61 e0       	ldi	r22, 0x01	; 1
 948:	8a e1       	ldi	r24, 0x1A	; 26
 94a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 94e:	84 ef       	ldi	r24, 0xF4	; 244
 950:	91 e0       	ldi	r25, 0x01	; 1
 952:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN26, DIO_PIN_LOW);
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	8a e1       	ldi	r24, 0x1A	; 26
 95a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 95e:	84 ef       	ldi	r24, 0xF4	; 244
 960:	91 e0       	ldi	r25, 0x01	; 1
 962:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN27, DIO_PIN_HIGH);
 966:	61 e0       	ldi	r22, 0x01	; 1
 968:	8b e1       	ldi	r24, 0x1B	; 27
 96a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 96e:	84 ef       	ldi	r24, 0xF4	; 244
 970:	91 e0       	ldi	r25, 0x01	; 1
 972:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN27, DIO_PIN_LOW);
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	8b e1       	ldi	r24, 0x1B	; 27
 97a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 97e:	84 ef       	ldi	r24, 0xF4	; 244
 980:	91 e0       	ldi	r25, 0x01	; 1
 982:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN28, DIO_PIN_HIGH);
 986:	61 e0       	ldi	r22, 0x01	; 1
 988:	8c e1       	ldi	r24, 0x1C	; 28
 98a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 98e:	84 ef       	ldi	r24, 0xF4	; 244
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN28, DIO_PIN_LOW);
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	8c e1       	ldi	r24, 0x1C	; 28
 99a:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 99e:	84 ef       	ldi	r24, 0xF4	; 244
 9a0:	91 e0       	ldi	r25, 0x01	; 1
 9a2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN29, DIO_PIN_HIGH);
 9a6:	61 e0       	ldi	r22, 0x01	; 1
 9a8:	8d e1       	ldi	r24, 0x1D	; 29
 9aa:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 9ae:	84 ef       	ldi	r24, 0xF4	; 244
 9b0:	91 e0       	ldi	r25, 0x01	; 1
 9b2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN29, DIO_PIN_LOW);
 9b6:	60 e0       	ldi	r22, 0x00	; 0
 9b8:	8d e1       	ldi	r24, 0x1D	; 29
 9ba:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 9be:	84 ef       	ldi	r24, 0xF4	; 244
 9c0:	91 e0       	ldi	r25, 0x01	; 1
 9c2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN30, DIO_PIN_HIGH);
 9c6:	61 e0       	ldi	r22, 0x01	; 1
 9c8:	8e e1       	ldi	r24, 0x1E	; 30
 9ca:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 9ce:	84 ef       	ldi	r24, 0xF4	; 244
 9d0:	91 e0       	ldi	r25, 0x01	; 1
 9d2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN30, DIO_PIN_LOW);
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	8e e1       	ldi	r24, 0x1E	; 30
 9da:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 9de:	84 ef       	ldi	r24, 0xF4	; 244
 9e0:	91 e0       	ldi	r25, 0x01	; 1
 9e2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN31, DIO_PIN_HIGH);
 9e6:	61 e0       	ldi	r22, 0x01	; 1
 9e8:	8f e1       	ldi	r24, 0x1F	; 31
 9ea:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 9ee:	84 ef       	ldi	r24, 0xF4	; 244
 9f0:	91 e0       	ldi	r25, 0x01	; 1
 9f2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN31, DIO_PIN_LOW);
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	8f e1       	ldi	r24, 0x1F	; 31
 9fa:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8SetPinValue>
			Lib_vDelayMs(500);
 9fe:	84 ef       	ldi	r24, 0xF4	; 244
 a00:	91 e0       	ldi	r25, 0x01	; 1
 a02:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Lib_vDelayMs>
			DIO_u8SetPinValue(DIO_PIN24, DIO_PIN_HIGH);
 a06:	7f cf       	rjmp	.-258    	; 0x906 <main+0x10>

00000a08 <__umulhisi3>:
 a08:	a2 9f       	mul	r26, r18
 a0a:	b0 01       	movw	r22, r0
 a0c:	b3 9f       	mul	r27, r19
 a0e:	c0 01       	movw	r24, r0
 a10:	a3 9f       	mul	r26, r19
 a12:	70 0d       	add	r23, r0
 a14:	81 1d       	adc	r24, r1
 a16:	11 24       	eor	r1, r1
 a18:	91 1d       	adc	r25, r1
 a1a:	b2 9f       	mul	r27, r18
 a1c:	70 0d       	add	r23, r0
 a1e:	81 1d       	adc	r24, r1
 a20:	11 24       	eor	r1, r1
 a22:	91 1d       	adc	r25, r1
 a24:	08 95       	ret

00000a26 <_exit>:
 a26:	f8 94       	cli

00000a28 <__stop_program>:
 a28:	ff cf       	rjmp	.-2      	; 0xa28 <__stop_program>
