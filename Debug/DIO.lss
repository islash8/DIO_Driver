
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000009da  00000a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000195c  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d6d  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003121  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003134  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00003656  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00003b16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 57 04 	call	0x8ae	; 0x8ae <main>
  7a:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vInit>:
/* Inputs:  -> void																	*/
/* Outputs: -> void                                                      			*/
/************************************************************************************/

void DIO_vInit (void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRA = CONC_8BIT(DIO_u8_PIN0_INIT_DIR,  DIO_u8_PIN1_INIT_DIR,
  8a:	8a e3       	ldi	r24, 0x3A	; 58
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTA = CONC_8BIT(DIO_u8_PIN0_INIT_PORT_VAL,  DIO_u8_PIN1_INIT_PORT_VAL,
  92:	8b e3       	ldi	r24, 0x3B	; 59
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	fc 01       	movw	r30, r24
  98:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINA = CONC_8BIT(DIO_u8_PIN0_INIT_PIN_VAL,  DIO_u8_PIN1_INIT_PIN_VAL,
  9a:	89 e3       	ldi	r24, 0x39	; 57
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRB = CONC_8BIT(DIO_u8_PIN8_INIT_DIR ,  DIO_u8_PIN9_INIT_DIR,
  a2:	87 e3       	ldi	r24, 0x37	; 55
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTB = CONC_8BIT(DIO_u8_PIN8_INIT_PORT_VAL ,  DIO_u8_PIN9_INIT_PORT_VAL,
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINB = CONC_8BIT(DIO_u8_PIN8_INIT_PIN_VAL ,  DIO_u8_PIN9_INIT_PIN_VAL,
  b2:	86 e3       	ldi	r24, 0x36	; 54
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
/* -------------------------------> Port C <----------------------------------------*/
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_DDRC = CONC_8BIT(DIO_u8_PIN16_INIT_DIR,  DIO_u8_PIN17_INIT_DIR,
  ba:	84 e3       	ldi	r24, 0x34	; 52
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_DIR,  DIO_u8_PIN19_INIT_DIR,
								  DIO_u8_PIN20_INIT_DIR,  DIO_u8_PIN21_INIT_DIR,
								  DIO_u8_PIN22_INIT_DIR,  DIO_u8_PIN23_INIT_DIR);

	DIO_Register_PORTC = CONC_8BIT(DIO_u8_PIN16_INIT_PORT_VAL,  DIO_u8_PIN17_INIT_PORT_VAL,
  c2:	85 e3       	ldi	r24, 0x35	; 53
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_PORT_VAL,  DIO_u8_PIN19_INIT_PORT_VAL,
								  DIO_u8_PIN20_INIT_PORT_VAL,  DIO_u8_PIN21_INIT_PORT_VAL,
								  DIO_u8_PIN22_INIT_PORT_VAL,  DIO_u8_PIN23_INIT_PORT_VAL);

	DIO_Register_PINC = CONC_8BIT(DIO_u8_PIN16_INIT_PIN_VAL,  DIO_u8_PIN17_INIT_PIN_VAL,
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

/* -------------------------------> Port D <----------------------------------------*/
	DIO_Register_DDRD = CONC_8BIT(DIO_u8_PIN24_INIT_DIR,  DIO_u8_PIN25_INIT_DIR,
  d2:	81 e3       	ldi	r24, 0x31	; 49
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTD = CONC_8BIT(DIO_u8_PIN24_INIT_PORT_VAL,  DIO_u8_PIN25_INIT_PORT_VAL,
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2f e1       	ldi	r18, 0x1F	; 31
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PIND = CONC_8BIT(DIO_u8_PIN24_INIT_PIN_VAL,  DIO_u8_PIN25_INIT_PIN_VAL,
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	10 82       	st	Z, r1
        #define DIO_PIN31_INIT_VALUE   DIO_PIN_INIT_VAL_LOW
      #endif

/************************************************************************************/

}
  ee:	00 00       	nop
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <DIO_u8SetPinDirection>:
/*          -> Direction (copy_u8Direction) (either 0 for input or 1 for output)	*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinDirection(u8 copy_u8PinNB, u8 copy_u8Direction)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	00 d0       	rcall	.+0      	; 0xfc <DIO_u8SetPinDirection+0x6>
  fc:	0f 92       	push	r0
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	6b 83       	std	Y+3, r22	; 0x03
/*===========================>> Local variables <<==================================*/

	u8 local_u8Error  = STD_ERROR_OK; /* ----> This is used as a return value       */
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	89 83       	std	Y+1, r24	; 0x01


	/* validates the input if it's more than maximum number of pins					*/

	if(copy_u8PinNB < DIO_MAXPINNB)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	80 32       	cpi	r24, 0x20	; 32
 10e:	08 f0       	brcs	.+2      	; 0x112 <DIO_u8SetPinDirection+0x1c>
 110:	ca c0       	rjmp	.+404    	; 0x2a6 <DIO_u8SetPinDirection+0x1b0>
	{
		switch (copy_u8Direction)
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	21 f0       	breq	.+8      	; 0x124 <DIO_u8SetPinDirection+0x2e>
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	09 f4       	brne	.+2      	; 0x122 <DIO_u8SetPinDirection+0x2c>
 120:	65 c0       	rjmp	.+202    	; 0x1ec <DIO_u8SetPinDirection+0xf6>
 122:	be c0       	rjmp	.+380    	; 0x2a0 <DIO_u8SetPinDirection+0x1aa>
		{
			case DIO_PIN_INPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	98 f4       	brcc	.+38     	; 0x150 <DIO_u8SetPinDirection+0x5a>
				{
					DIO_Register_DDRA = RESET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 12a:	8a e3       	ldi	r24, 0x3A	; 58
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	28 2f       	mov	r18, r24
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	80 5a       	subi	r24, 0xA0	; 160
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	80 95       	com	r24
 144:	28 23       	and	r18, r24
 146:	8a e3       	ldi	r24, 0x3A	; 58
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 14e:	ad c0       	rjmp	.+346    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	b0 f0       	brcs	.+44     	; 0x182 <DIO_u8SetPinDirection+0x8c>
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	98 f4       	brcc	.+38     	; 0x182 <DIO_u8SetPinDirection+0x8c>
					DIO_Register_DDRB = RESET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 15c:	87 e3       	ldi	r24, 0x37	; 55
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	28 2f       	mov	r18, r24
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	80 5a       	subi	r24, 0xA0	; 160
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	80 95       	com	r24
 176:	28 23       	and	r18, r24
 178:	87 e3       	ldi	r24, 0x37	; 55
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
 180:	34 c0       	rjmp	.+104    	; 0x1ea <DIO_u8SetPinDirection+0xf4>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	b0 f0       	brcs	.+44     	; 0x1b4 <DIO_u8SetPinDirection+0xbe>
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	88 31       	cpi	r24, 0x18	; 24
 18c:	98 f4       	brcc	.+38     	; 0x1b4 <DIO_u8SetPinDirection+0xbe>
					DIO_Register_DDRC = RESET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 18e:	84 e3       	ldi	r24, 0x34	; 52
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	28 2f       	mov	r18, r24
 198:	8a 81       	ldd	r24, Y+2	; 0x02
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	80 5a       	subi	r24, 0xA0	; 160
 1a0:	9f 4f       	sbci	r25, 0xFF	; 255
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	80 95       	com	r24
 1a8:	28 23       	and	r18, r24
 1aa:	84 e3       	ldi	r24, 0x34	; 52
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	1b c0       	rjmp	.+54     	; 0x1ea <DIO_u8SetPinDirection+0xf4>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	88 31       	cpi	r24, 0x18	; 24
 1b8:	08 f4       	brcc	.+2      	; 0x1bc <DIO_u8SetPinDirection+0xc6>
 1ba:	77 c0       	rjmp	.+238    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	80 32       	cpi	r24, 0x20	; 32
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <DIO_u8SetPinDirection+0xce>
 1c2:	73 c0       	rjmp	.+230    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	28 2f       	mov	r18, r24
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	80 5a       	subi	r24, 0xA0	; 160
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	80 95       	com	r24
 1de:	28 23       	and	r18, r24
 1e0:	81 e3       	ldi	r24, 0x31	; 49
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
				break;
 1e8:	60 c0       	rjmp	.+192    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
 1ea:	5f c0       	rjmp	.+190    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>

			case DIO_PIN_OUTPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	88 f4       	brcc	.+34     	; 0x214 <DIO_u8SetPinDirection+0x11e>
				{
					DIO_Register_DDRA = SET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 1f2:	8a e3       	ldi	r24, 0x3A	; 58
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	30 81       	ld	r19, Z
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	80 5a       	subi	r24, 0xA0	; 160
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	fc 01       	movw	r30, r24
 206:	20 81       	ld	r18, Z
 208:	8a e3       	ldi	r24, 0x3A	; 58
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	23 2b       	or	r18, r19
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 212:	4d c0       	rjmp	.+154    	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	88 30       	cpi	r24, 0x08	; 8
 218:	a0 f0       	brcs	.+40     	; 0x242 <DIO_u8SetPinDirection+0x14c>
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	80 31       	cpi	r24, 0x10	; 16
 21e:	88 f4       	brcc	.+34     	; 0x242 <DIO_u8SetPinDirection+0x14c>
					DIO_Register_DDRB = SET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 220:	87 e3       	ldi	r24, 0x37	; 55
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	30 81       	ld	r19, Z
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	80 5a       	subi	r24, 0xA0	; 160
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	fc 01       	movw	r30, r24
 234:	20 81       	ld	r18, Z
 236:	87 e3       	ldi	r24, 0x37	; 55
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	23 2b       	or	r18, r19
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	2e c0       	rjmp	.+92     	; 0x29e <DIO_u8SetPinDirection+0x1a8>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	80 31       	cpi	r24, 0x10	; 16
 246:	a0 f0       	brcs	.+40     	; 0x270 <DIO_u8SetPinDirection+0x17a>
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	88 31       	cpi	r24, 0x18	; 24
 24c:	88 f4       	brcc	.+34     	; 0x270 <DIO_u8SetPinDirection+0x17a>
					DIO_Register_DDRC = SET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 24e:	84 e3       	ldi	r24, 0x34	; 52
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	30 81       	ld	r19, Z
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	80 5a       	subi	r24, 0xA0	; 160
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	fc 01       	movw	r30, r24
 262:	20 81       	ld	r18, Z
 264:	84 e3       	ldi	r24, 0x34	; 52
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	23 2b       	or	r18, r19
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
 26e:	17 c0       	rjmp	.+46     	; 0x29e <DIO_u8SetPinDirection+0x1a8>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	88 31       	cpi	r24, 0x18	; 24
 274:	e0 f0       	brcs	.+56     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	80 32       	cpi	r24, 0x20	; 32
 27a:	c8 f4       	brcc	.+50     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 27c:	81 e3       	ldi	r24, 0x31	; 49
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	30 81       	ld	r19, Z
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	88 2f       	mov	r24, r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	80 5a       	subi	r24, 0xA0	; 160
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	fc 01       	movw	r30, r24
 290:	20 81       	ld	r18, Z
 292:	81 e3       	ldi	r24, 0x31	; 49
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	23 2b       	or	r18, r19
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
				break;
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>

			default:
				local_u8Error = STD_ERROR_NOK;
 2a0:	19 82       	std	Y+1, r1	; 0x01
				break;
 2a2:	00 00       	nop
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <DIO_u8SetPinDirection+0x1ba>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 2a6:	19 82       	std	Y+1, r1	; 0x01
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <DIO_u8SetPinDirection+0x1ba>
				break;
 2aa:	00 00       	nop
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <DIO_u8SetPinDirection+0x1ba>
				break;
 2ae:	00 00       	nop
	}

	return local_u8Error;
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <DIO_u8SetPinValue>:
/*          -> Value (copy_u8Value) (either 0 or 1)	                                */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinValue(u8 copy_u8PinNB, u8 copy_u8Value)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_u8SetPinValue+0x6>
 2c4:	0f 92       	push	r0
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	8a 83       	std	Y+2, r24	; 0x02
 2cc:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	89 83       	std	Y+1, r24	; 0x01

	/* Validates the input to check whether the user enter the
	 * correct pin number, and whether he enters the right which
	 * is not bigger than upper limit.
	 */
	if(copy_u8PinNB < DIO_MAXPINNB)
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	80 32       	cpi	r24, 0x20	; 32
 2d6:	08 f0       	brcs	.+2      	; 0x2da <DIO_u8SetPinValue+0x1c>
 2d8:	cb c0       	rjmp	.+406    	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
	{
		switch(copy_u8Value)
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	21 f0       	breq	.+8      	; 0x2ec <DIO_u8SetPinValue+0x2e>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_u8SetPinValue+0x2c>
 2e8:	65 c0       	rjmp	.+202    	; 0x3b4 <DIO_u8SetPinValue+0xf6>
 2ea:	c0 c0       	rjmp	.+384    	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
		{
			case DIO_PIN_LOW:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	88 30       	cpi	r24, 0x08	; 8
 2f0:	98 f4       	brcc	.+38     	; 0x318 <DIO_u8SetPinValue+0x5a>
				{
					DIO_Register_PORTA = RESET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 2f2:	8b e3       	ldi	r24, 0x3B	; 59
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	28 2f       	mov	r18, r24
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	88 2f       	mov	r24, r24
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	80 5a       	subi	r24, 0xA0	; 160
 304:	9f 4f       	sbci	r25, 0xFF	; 255
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	80 95       	com	r24
 30c:	28 23       	and	r18, r24
 30e:	8b e3       	ldi	r24, 0x3B	; 59
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 316:	ae c0       	rjmp	.+348    	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	b0 f0       	brcs	.+44     	; 0x34a <DIO_u8SetPinValue+0x8c>
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	80 31       	cpi	r24, 0x10	; 16
 322:	98 f4       	brcc	.+38     	; 0x34a <DIO_u8SetPinValue+0x8c>
					DIO_Register_PORTB = RESET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 324:	88 e3       	ldi	r24, 0x38	; 56
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	80 81       	ld	r24, Z
 32c:	28 2f       	mov	r18, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	88 2f       	mov	r24, r24
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	80 5a       	subi	r24, 0xA0	; 160
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	80 95       	com	r24
 33e:	28 23       	and	r18, r24
 340:	88 e3       	ldi	r24, 0x38	; 56
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
 348:	34 c0       	rjmp	.+104    	; 0x3b2 <DIO_u8SetPinValue+0xf4>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	80 31       	cpi	r24, 0x10	; 16
 34e:	b0 f0       	brcs	.+44     	; 0x37c <DIO_u8SetPinValue+0xbe>
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	88 31       	cpi	r24, 0x18	; 24
 354:	98 f4       	brcc	.+38     	; 0x37c <DIO_u8SetPinValue+0xbe>
					DIO_Register_PORTC = RESET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 356:	85 e3       	ldi	r24, 0x35	; 53
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	28 2f       	mov	r18, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	88 2f       	mov	r24, r24
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	80 5a       	subi	r24, 0xA0	; 160
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	fc 01       	movw	r30, r24
 36c:	80 81       	ld	r24, Z
 36e:	80 95       	com	r24
 370:	28 23       	and	r18, r24
 372:	85 e3       	ldi	r24, 0x35	; 53
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
 37a:	1b c0       	rjmp	.+54     	; 0x3b2 <DIO_u8SetPinValue+0xf4>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	88 31       	cpi	r24, 0x18	; 24
 380:	08 f4       	brcc	.+2      	; 0x384 <DIO_u8SetPinValue+0xc6>
 382:	78 c0       	rjmp	.+240    	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	08 f0       	brcs	.+2      	; 0x38c <DIO_u8SetPinValue+0xce>
 38a:	74 c0       	rjmp	.+232    	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 38c:	82 e3       	ldi	r24, 0x32	; 50
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fc 01       	movw	r30, r24
 392:	80 81       	ld	r24, Z
 394:	28 2f       	mov	r18, r24
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	80 5a       	subi	r24, 0xA0	; 160
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	fc 01       	movw	r30, r24
 3a2:	80 81       	ld	r24, Z
 3a4:	80 95       	com	r24
 3a6:	28 23       	and	r18, r24
 3a8:	82 e3       	ldi	r24, 0x32	; 50
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
				break;
 3b0:	61 c0       	rjmp	.+194    	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 3b2:	60 c0       	rjmp	.+192    	; 0x474 <__FUSE_REGION_LENGTH__+0x74>

			case DIO_PIN_HIGH:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	88 30       	cpi	r24, 0x08	; 8
 3b8:	88 f4       	brcc	.+34     	; 0x3dc <DIO_u8SetPinValue+0x11e>
				{
					DIO_Register_PORTA = SET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 3ba:	8b e3       	ldi	r24, 0x3B	; 59
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fc 01       	movw	r30, r24
 3c0:	30 81       	ld	r19, Z
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	80 5a       	subi	r24, 0xA0	; 160
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 81       	ld	r18, Z
 3d0:	8b e3       	ldi	r24, 0x3B	; 59
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	23 2b       	or	r18, r19
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB % 8);
				}
				break;
 3da:	4e c0       	rjmp	.+156    	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	a0 f0       	brcs	.+40     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	80 31       	cpi	r24, 0x10	; 16
 3e6:	88 f4       	brcc	.+34     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
					DIO_Register_PORTB = SET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 3e8:	88 e3       	ldi	r24, 0x38	; 56
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	fc 01       	movw	r30, r24
 3ee:	30 81       	ld	r19, Z
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	88 2f       	mov	r24, r24
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	80 5a       	subi	r24, 0xA0	; 160
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 81       	ld	r18, Z
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	23 2b       	or	r18, r19
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
 408:	30 c0       	rjmp	.+96     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	80 31       	cpi	r24, 0x10	; 16
 40e:	a0 f0       	brcs	.+40     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	88 31       	cpi	r24, 0x18	; 24
 414:	88 f4       	brcc	.+34     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
					DIO_Register_PORTC = SET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 416:	85 e3       	ldi	r24, 0x35	; 53
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	fc 01       	movw	r30, r24
 41c:	30 81       	ld	r19, Z
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	88 2f       	mov	r24, r24
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	80 5a       	subi	r24, 0xA0	; 160
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	fc 01       	movw	r30, r24
 42a:	20 81       	ld	r18, Z
 42c:	85 e3       	ldi	r24, 0x35	; 53
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	23 2b       	or	r18, r19
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
 436:	19 c0       	rjmp	.+50     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	88 31       	cpi	r24, 0x18	; 24
 43c:	e8 f0       	brcs	.+58     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	80 32       	cpi	r24, 0x20	; 32
 442:	d0 f4       	brcc	.+52     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB % 8);
 444:	82 e3       	ldi	r24, 0x32	; 50
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	30 81       	ld	r19, Z
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	88 2f       	mov	r24, r24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	87 70       	andi	r24, 0x07	; 7
 454:	99 27       	eor	r25, r25
 456:	80 5a       	subi	r24, 0xA0	; 160
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	fc 01       	movw	r30, r24
 45c:	20 81       	ld	r18, Z
 45e:	82 e3       	ldi	r24, 0x32	; 50
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	23 2b       	or	r18, r19
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18
				break;
 468:	07 c0       	rjmp	.+14     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
 46a:	06 c0       	rjmp	.+12     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>

			default:
				local_u8Error = STD_ERROR_NOK;
 46c:	19 82       	std	Y+1, r1	; 0x01
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
		}

	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 470:	19 82       	std	Y+1, r1	; 0x01
 472:	03 c0       	rjmp	.+6      	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
				break;
 474:	00 00       	nop
 476:	01 c0       	rjmp	.+2      	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
				break;
 478:	00 00       	nop
	}

	return local_u8Error;
 47a:	89 81       	ldd	r24, Y+1	; 0x01
}
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <DIO_u8ReadPinValue>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPinValue(u8 copy_u8PinNB, u8 * copy_pu8Value)
{
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	00 d0       	rcall	.+0      	; 0x48e <DIO_u8ReadPinValue+0x6>
 48e:	00 d0       	rcall	.+0      	; 0x490 <DIO_u8ReadPinValue+0x8>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	8a 83       	std	Y+2, r24	; 0x02
 496:	7c 83       	std	Y+4, r23	; 0x04
 498:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PinNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	80 32       	cpi	r24, 0x20	; 32
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <DIO_u8ReadPinValue+0x1e>
 4a4:	60 c0       	rjmp	.+192    	; 0x566 <DIO_u8ReadPinValue+0xde>
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	9c 81       	ldd	r25, Y+4	; 0x04
 4aa:	89 2b       	or	r24, r25
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <DIO_u8ReadPinValue+0x28>
 4ae:	5b c0       	rjmp	.+182    	; 0x566 <DIO_u8ReadPinValue+0xde>
	{
		if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	88 30       	cpi	r24, 0x08	; 8
 4b4:	88 f4       	brcc	.+34     	; 0x4d8 <DIO_u8ReadPinValue+0x50>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINA, copy_u8PinNB);
 4b6:	89 e3       	ldi	r24, 0x39	; 57
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 81       	ld	r18, Z
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	88 2f       	mov	r24, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	80 5a       	subi	r24, 0xA0	; 160
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	fc 01       	movw	r30, r24
 4ca:	80 81       	ld	r24, Z
 4cc:	28 23       	and	r18, r24
 4ce:	8b 81       	ldd	r24, Y+3	; 0x03
 4d0:	9c 81       	ldd	r25, Y+4	; 0x04
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
 4d6:	44 c0       	rjmp	.+136    	; 0x560 <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	a0 f0       	brcs	.+40     	; 0x506 <DIO_u8ReadPinValue+0x7e>
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	80 31       	cpi	r24, 0x10	; 16
 4e2:	88 f4       	brcc	.+34     	; 0x506 <DIO_u8ReadPinValue+0x7e>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINB, copy_u8PinNB);
 4e4:	86 e3       	ldi	r24, 0x36	; 54
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 81       	ld	r18, Z
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	80 5a       	subi	r24, 0xA0	; 160
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	fc 01       	movw	r30, r24
 4f8:	80 81       	ld	r24, Z
 4fa:	28 23       	and	r18, r24
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
 4fe:	9c 81       	ldd	r25, Y+4	; 0x04
 500:	fc 01       	movw	r30, r24
 502:	20 83       	st	Z, r18
 504:	2d c0       	rjmp	.+90     	; 0x560 <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	80 31       	cpi	r24, 0x10	; 16
 50a:	a0 f0       	brcs	.+40     	; 0x534 <DIO_u8ReadPinValue+0xac>
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	88 31       	cpi	r24, 0x18	; 24
 510:	88 f4       	brcc	.+34     	; 0x534 <DIO_u8ReadPinValue+0xac>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINC, copy_u8PinNB);
 512:	83 e3       	ldi	r24, 0x33	; 51
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	fc 01       	movw	r30, r24
 518:	20 81       	ld	r18, Z
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	88 2f       	mov	r24, r24
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	80 5a       	subi	r24, 0xA0	; 160
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	fc 01       	movw	r30, r24
 526:	80 81       	ld	r24, Z
 528:	28 23       	and	r18, r24
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	9c 81       	ldd	r25, Y+4	; 0x04
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
 532:	16 c0       	rjmp	.+44     	; 0x560 <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 534:	8a 81       	ldd	r24, Y+2	; 0x02
 536:	88 31       	cpi	r24, 0x18	; 24
 538:	98 f0       	brcs	.+38     	; 0x560 <DIO_u8ReadPinValue+0xd8>
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	80 32       	cpi	r24, 0x20	; 32
 53e:	80 f4       	brcc	.+32     	; 0x560 <DIO_u8ReadPinValue+0xd8>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PIND, copy_u8PinNB);
 540:	80 e3       	ldi	r24, 0x30	; 48
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	fc 01       	movw	r30, r24
 546:	20 81       	ld	r18, Z
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	80 5a       	subi	r24, 0xA0	; 160
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	fc 01       	movw	r30, r24
 554:	80 81       	ld	r24, Z
 556:	28 23       	and	r18, r24
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	9c 81       	ldd	r25, Y+4	; 0x04
 55c:	fc 01       	movw	r30, r24
 55e:	20 83       	st	Z, r18
		}
		local_u8Error = STD_ERROR_OK;
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	01 c0       	rjmp	.+2      	; 0x568 <DIO_u8ReadPinValue+0xe0>
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 566:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 568:	89 81       	ldd	r24, Y+1	; 0x01
}
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <DIO_u8SetPortDirection>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortDirection(u8 copy_u8PortNB, u8 copy_u8Direction)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	00 d0       	rcall	.+0      	; 0x57e <DIO_u8SetPortDirection+0x6>
 57e:	0f 92       	push	r0
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	8a 83       	std	Y+2, r24	; 0x02
 586:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortNB < DIO_MAXPORTNB)
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	84 30       	cpi	r24, 0x04	; 4
 590:	08 f0       	brcs	.+2      	; 0x594 <DIO_u8SetPortDirection+0x1c>
 592:	4f c0       	rjmp	.+158    	; 0x632 <DIO_u8SetPortDirection+0xba>
	{
		switch(copy_u8Direction)
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	21 f0       	breq	.+8      	; 0x5a6 <DIO_u8SetPortDirection+0x2e>
 59e:	8f 3f       	cpi	r24, 0xFF	; 255
 5a0:	91 05       	cpc	r25, r1
 5a2:	09 f1       	breq	.+66     	; 0x5e6 <DIO_u8SetPortDirection+0x6e>
 5a4:	44 c0       	rjmp	.+136    	; 0x62e <DIO_u8SetPortDirection+0xb6>
		{
			case DIO_PORT_INPUT:
				if(copy_u8PortNB == DIO_PORTA)
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	88 23       	and	r24, r24
 5aa:	29 f4       	brne	.+10     	; 0x5b6 <DIO_u8SetPortDirection+0x3e>
				{
					DIO_Register_DDRA = RESET_PORT(DIO_Register_DDRA);
 5ac:	8a e3       	ldi	r24, 0x3A	; 58
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
				}
				break;
 5b4:	40 c0       	rjmp	.+128    	; 0x636 <DIO_u8SetPortDirection+0xbe>
				else if(copy_u8PortNB == DIO_PORTB)
 5b6:	8a 81       	ldd	r24, Y+2	; 0x02
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	29 f4       	brne	.+10     	; 0x5c6 <DIO_u8SetPortDirection+0x4e>
					DIO_Register_DDRB = RESET_PORT(DIO_Register_DDRB);
 5bc:	87 e3       	ldi	r24, 0x37	; 55
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	fc 01       	movw	r30, r24
 5c2:	10 82       	st	Z, r1
				break;
 5c4:	38 c0       	rjmp	.+112    	; 0x636 <DIO_u8SetPortDirection+0xbe>
				else if(copy_u8PortNB == DIO_PORTC)
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <DIO_u8SetPortDirection+0x5e>
					DIO_Register_DDRC = RESET_PORT(DIO_Register_DDRC);
 5cc:	84 e3       	ldi	r24, 0x34	; 52
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	10 82       	st	Z, r1
				break;
 5d4:	30 c0       	rjmp	.+96     	; 0x636 <DIO_u8SetPortDirection+0xbe>
				else if(copy_u8PortNB == DIO_PORTD)
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	83 30       	cpi	r24, 0x03	; 3
 5da:	69 f5       	brne	.+90     	; 0x636 <DIO_u8SetPortDirection+0xbe>
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
 5dc:	81 e3       	ldi	r24, 0x31	; 49
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	fc 01       	movw	r30, r24
 5e2:	10 82       	st	Z, r1
				break;
 5e4:	28 c0       	rjmp	.+80     	; 0x636 <DIO_u8SetPortDirection+0xbe>

			case DIO_PORT_OUTPUT:
				if(copy_u8PortNB == DIO_PORTA)
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	88 23       	and	r24, r24
 5ea:	31 f4       	brne	.+12     	; 0x5f8 <DIO_u8SetPortDirection+0x80>
				{
					DIO_Register_DDRA = SET_PORT(DIO_Register_DDRA);
 5ec:	8a e3       	ldi	r24, 0x3A	; 58
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
				}
				break;
 5f6:	21 c0       	rjmp	.+66     	; 0x63a <DIO_u8SetPortDirection+0xc2>
				else if(copy_u8PortNB == DIO_PORTB)
 5f8:	8a 81       	ldd	r24, Y+2	; 0x02
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	31 f4       	brne	.+12     	; 0x60a <DIO_u8SetPortDirection+0x92>
					DIO_Register_DDRB = SET_PORT(DIO_Register_DDRB);
 5fe:	87 e3       	ldi	r24, 0x37	; 55
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	21 e0       	ldi	r18, 0x01	; 1
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18
				break;
 608:	18 c0       	rjmp	.+48     	; 0x63a <DIO_u8SetPortDirection+0xc2>
				else if(copy_u8PortNB == DIO_PORTC)
 60a:	8a 81       	ldd	r24, Y+2	; 0x02
 60c:	82 30       	cpi	r24, 0x02	; 2
 60e:	31 f4       	brne	.+12     	; 0x61c <DIO_u8SetPortDirection+0xa4>
					DIO_Register_DDRC = SET_PORT(DIO_Register_DDRC);
 610:	84 e3       	ldi	r24, 0x34	; 52
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	fc 01       	movw	r30, r24
 618:	20 83       	st	Z, r18
				break;
 61a:	0f c0       	rjmp	.+30     	; 0x63a <DIO_u8SetPortDirection+0xc2>
				else if(copy_u8PortNB == DIO_PORTD)
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	83 30       	cpi	r24, 0x03	; 3
 620:	61 f4       	brne	.+24     	; 0x63a <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
 622:	81 e3       	ldi	r24, 0x31	; 49
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	21 e0       	ldi	r18, 0x01	; 1
 628:	fc 01       	movw	r30, r24
 62a:	20 83       	st	Z, r18
				break;
 62c:	06 c0       	rjmp	.+12     	; 0x63a <DIO_u8SetPortDirection+0xc2>

			default:
				local_u8Error = STD_ERROR_NOK;
 62e:	19 82       	std	Y+1, r1	; 0x01
 630:	05 c0       	rjmp	.+10     	; 0x63c <DIO_u8SetPortDirection+0xc4>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 632:	19 82       	std	Y+1, r1	; 0x01
 634:	03 c0       	rjmp	.+6      	; 0x63c <DIO_u8SetPortDirection+0xc4>
				break;
 636:	00 00       	nop
 638:	01 c0       	rjmp	.+2      	; 0x63c <DIO_u8SetPortDirection+0xc4>
				break;
 63a:	00 00       	nop
	}

	return local_u8Error;
 63c:	89 81       	ldd	r24, Y+1	; 0x01
}
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <DIO_u8SetPortValue>:
/*          -> Value (copy_u8Value) (from 0x00 till 0xFF)                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortValue(u8 copy_u8PortNB, u8 copy_pu8Value)
{
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	00 d0       	rcall	.+0      	; 0x650 <DIO_u8SetPortValue+0x6>
 650:	0f 92       	push	r0
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	8a 83       	std	Y+2, r24	; 0x02
 658:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	89 83       	std	Y+1, r24	; 0x01

	if( copy_u8PortNB < DIO_MAXPORTNB )
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	84 30       	cpi	r24, 0x04	; 4
 662:	08 f0       	brcs	.+2      	; 0x666 <DIO_u8SetPortValue+0x1c>
 664:	4f c0       	rjmp	.+158    	; 0x704 <DIO_u8SetPortValue+0xba>
	{
		switch(copy_pu8Value)
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	21 f0       	breq	.+8      	; 0x678 <DIO_u8SetPortValue+0x2e>
 670:	8f 3f       	cpi	r24, 0xFF	; 255
 672:	91 05       	cpc	r25, r1
 674:	09 f1       	breq	.+66     	; 0x6b8 <DIO_u8SetPortValue+0x6e>
 676:	44 c0       	rjmp	.+136    	; 0x700 <DIO_u8SetPortValue+0xb6>
		{
			case DIO_PORT_LOW:
				if(copy_u8PortNB == DIO_PORTA)
 678:	8a 81       	ldd	r24, Y+2	; 0x02
 67a:	88 23       	and	r24, r24
 67c:	29 f4       	brne	.+10     	; 0x688 <DIO_u8SetPortValue+0x3e>
				{
					DIO_Register_PORTA = RESET_PORT(DIO_Register_PORTA);
 67e:	8b e3       	ldi	r24, 0x3B	; 59
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	fc 01       	movw	r30, r24
 684:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
				}
				break;
 686:	40 c0       	rjmp	.+128    	; 0x708 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTB)
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	29 f4       	brne	.+10     	; 0x698 <DIO_u8SetPortValue+0x4e>
					DIO_Register_PORTB = RESET_PORT(DIO_Register_PORTB);
 68e:	88 e3       	ldi	r24, 0x38	; 56
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	fc 01       	movw	r30, r24
 694:	10 82       	st	Z, r1
				break;
 696:	38 c0       	rjmp	.+112    	; 0x708 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTC)
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	29 f4       	brne	.+10     	; 0x6a8 <DIO_u8SetPortValue+0x5e>
					DIO_Register_PORTC = RESET_PORT(DIO_Register_PORTC);
 69e:	85 e3       	ldi	r24, 0x35	; 53
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	fc 01       	movw	r30, r24
 6a4:	10 82       	st	Z, r1
				break;
 6a6:	30 c0       	rjmp	.+96     	; 0x708 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTD)
 6a8:	8a 81       	ldd	r24, Y+2	; 0x02
 6aa:	83 30       	cpi	r24, 0x03	; 3
 6ac:	69 f5       	brne	.+90     	; 0x708 <DIO_u8SetPortValue+0xbe>
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
 6ae:	82 e3       	ldi	r24, 0x32	; 50
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	fc 01       	movw	r30, r24
 6b4:	10 82       	st	Z, r1
				break;
 6b6:	28 c0       	rjmp	.+80     	; 0x708 <DIO_u8SetPortValue+0xbe>

			case DIO_PORT_OUTPUT:
				if(copy_u8PortNB == DIO_PORTA)
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	88 23       	and	r24, r24
 6bc:	31 f4       	brne	.+12     	; 0x6ca <DIO_u8SetPortValue+0x80>
				{
					DIO_Register_PORTA = SET_PORT(DIO_Register_PORTA);
 6be:	8b e3       	ldi	r24, 0x3B	; 59
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	21 e0       	ldi	r18, 0x01	; 1
 6c4:	fc 01       	movw	r30, r24
 6c6:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
				}
				break;
 6c8:	21 c0       	rjmp	.+66     	; 0x70c <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTB)
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	31 f4       	brne	.+12     	; 0x6dc <DIO_u8SetPortValue+0x92>
					DIO_Register_PORTB = SET_PORT(DIO_Register_PORTB);
 6d0:	88 e3       	ldi	r24, 0x38	; 56
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	21 e0       	ldi	r18, 0x01	; 1
 6d6:	fc 01       	movw	r30, r24
 6d8:	20 83       	st	Z, r18
				break;
 6da:	18 c0       	rjmp	.+48     	; 0x70c <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTC)
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	82 30       	cpi	r24, 0x02	; 2
 6e0:	31 f4       	brne	.+12     	; 0x6ee <DIO_u8SetPortValue+0xa4>
					DIO_Register_PORTC = SET_PORT(DIO_Register_PORTC);
 6e2:	85 e3       	ldi	r24, 0x35	; 53
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	21 e0       	ldi	r18, 0x01	; 1
 6e8:	fc 01       	movw	r30, r24
 6ea:	20 83       	st	Z, r18
				break;
 6ec:	0f c0       	rjmp	.+30     	; 0x70c <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTD)
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	61 f4       	brne	.+24     	; 0x70c <DIO_u8SetPortValue+0xc2>
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
 6f4:	82 e3       	ldi	r24, 0x32	; 50
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	21 e0       	ldi	r18, 0x01	; 1
 6fa:	fc 01       	movw	r30, r24
 6fc:	20 83       	st	Z, r18
				break;
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <DIO_u8SetPortValue+0xc2>

			default:
				local_u8Error = STD_ERROR_NOK;
 700:	19 82       	std	Y+1, r1	; 0x01
 702:	05 c0       	rjmp	.+10     	; 0x70e <DIO_u8SetPortValue+0xc4>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 704:	19 82       	std	Y+1, r1	; 0x01
 706:	03 c0       	rjmp	.+6      	; 0x70e <DIO_u8SetPortValue+0xc4>
				break;
 708:	00 00       	nop
 70a:	01 c0       	rjmp	.+2      	; 0x70e <DIO_u8SetPortValue+0xc4>
				break;
 70c:	00 00       	nop
	}

	return local_u8Error;
 70e:	89 81       	ldd	r24, Y+1	; 0x01
}
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <DIO_u8ReadPortValue>:
/*          -> Location (* copy_pu8Value)                                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPortValue(u8 copy_u8PortNB, u8 * copy_pu8Value)
{
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	00 d0       	rcall	.+0      	; 0x722 <DIO_u8ReadPortValue+0x6>
 722:	00 d0       	rcall	.+0      	; 0x724 <DIO_u8ReadPortValue+0x8>
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	8a 83       	std	Y+2, r24	; 0x02
 72a:	7c 83       	std	Y+4, r23	; 0x04
 72c:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PortNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	80 32       	cpi	r24, 0x20	; 32
 736:	b0 f5       	brcc	.+108    	; 0x7a4 <DIO_u8ReadPortValue+0x88>
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	9c 81       	ldd	r25, Y+4	; 0x04
 73c:	89 2b       	or	r24, r25
 73e:	91 f1       	breq	.+100    	; 0x7a4 <DIO_u8ReadPortValue+0x88>
		{
			if(copy_u8PortNB == DIO_PORTA)
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	88 23       	and	r24, r24
 744:	49 f4       	brne	.+18     	; 0x758 <DIO_u8ReadPortValue+0x3c>
			{
				GET_PORT(DIO_Register_PINA, * copy_pu8Value);
 746:	89 e3       	ldi	r24, 0x39	; 57
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	fc 01       	movw	r30, r24
 74c:	20 81       	ld	r18, Z
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	9c 81       	ldd	r25, Y+4	; 0x04
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18
 756:	23 c0       	rjmp	.+70     	; 0x79e <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTB)
 758:	8a 81       	ldd	r24, Y+2	; 0x02
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	49 f4       	brne	.+18     	; 0x770 <DIO_u8ReadPortValue+0x54>
			{
				GET_PORT(DIO_Register_PINB, * copy_pu8Value);
 75e:	86 e3       	ldi	r24, 0x36	; 54
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	fc 01       	movw	r30, r24
 764:	20 81       	ld	r18, Z
 766:	8b 81       	ldd	r24, Y+3	; 0x03
 768:	9c 81       	ldd	r25, Y+4	; 0x04
 76a:	fc 01       	movw	r30, r24
 76c:	20 83       	st	Z, r18
 76e:	17 c0       	rjmp	.+46     	; 0x79e <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTC)
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	82 30       	cpi	r24, 0x02	; 2
 774:	49 f4       	brne	.+18     	; 0x788 <DIO_u8ReadPortValue+0x6c>
			{
				GET_PORT(DIO_Register_PINC, * copy_pu8Value);
 776:	83 e3       	ldi	r24, 0x33	; 51
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	fc 01       	movw	r30, r24
 77c:	20 81       	ld	r18, Z
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	9c 81       	ldd	r25, Y+4	; 0x04
 782:	fc 01       	movw	r30, r24
 784:	20 83       	st	Z, r18
 786:	0b c0       	rjmp	.+22     	; 0x79e <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTA)
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	88 23       	and	r24, r24
 78c:	41 f4       	brne	.+16     	; 0x79e <DIO_u8ReadPortValue+0x82>
			{
				GET_PORT(DIO_Register_PIND, * copy_pu8Value);
 78e:	80 e3       	ldi	r24, 0x30	; 48
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	fc 01       	movw	r30, r24
 794:	20 81       	ld	r18, Z
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	9c 81       	ldd	r25, Y+4	; 0x04
 79a:	fc 01       	movw	r30, r24
 79c:	20 83       	st	Z, r18
			}
			local_u8Error = STD_ERROR_OK;
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	89 83       	std	Y+1, r24	; 0x01
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <DIO_u8ReadPortValue+0x8a>
		}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 7a4:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 7a6:	89 81       	ldd	r24, Y+1	; 0x01
}
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <Lib_vDelayMs>:
/*  input 		-> Time value of delay -> copy_u16time              */
/*  output		-> N/A											    */
/********************************************************************/

void Lib_vDelayMs(u16 copy_u16time)
{
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
 7be:	2a 97       	sbiw	r28, 0x0a	; 10
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	9a 87       	std	Y+10, r25	; 0x0a
 7cc:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_CountNumber;
	/*--------------------------------------------------------------*/

	/*----------------------main implementation---------------------*/

	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 7ce:	1d 82       	std	Y+5, r1	; 0x05
 7d0:	1e 82       	std	Y+6, r1	; 0x06
 7d2:	1f 82       	std	Y+7, r1	; 0x07
 7d4:	18 86       	std	Y+8, r1	; 0x08
 7d6:	28 c0       	rjmp	.+80     	; 0x828 <Lib_vDelayMs+0x72>
		/*----------------------------------------------------------*/
		/* outer loop which runs multiple of 1ms					*/
		/* -> lower limit: 0										*/
		/* -> upper limit: copy_u16time 						    */
		/*----------------------------------------------------------*/
		for(Local_InsideLoopCounter = NULL; Local_InsideLoopCounter < LIB_U8_UPPER_THRESHOLD ; Local_InsideLoopCounter++)
 7d8:	19 82       	std	Y+1, r1	; 0x01
 7da:	1a 82       	std	Y+2, r1	; 0x02
 7dc:	1b 82       	std	Y+3, r1	; 0x03
 7de:	1c 82       	std	Y+4, r1	; 0x04
 7e0:	0f c0       	rjmp	.+30     	; 0x800 <Lib_vDelayMs+0x4a>
	...
 7ea:	89 81       	ldd	r24, Y+1	; 0x01
 7ec:	9a 81       	ldd	r25, Y+2	; 0x02
 7ee:	ab 81       	ldd	r26, Y+3	; 0x03
 7f0:	bc 81       	ldd	r27, Y+4	; 0x04
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	a1 1d       	adc	r26, r1
 7f6:	b1 1d       	adc	r27, r1
 7f8:	89 83       	std	Y+1, r24	; 0x01
 7fa:	9a 83       	std	Y+2, r25	; 0x02
 7fc:	ab 83       	std	Y+3, r26	; 0x03
 7fe:	bc 83       	std	Y+4, r27	; 0x04
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	9a 81       	ldd	r25, Y+2	; 0x02
 804:	ab 81       	ldd	r26, Y+3	; 0x03
 806:	bc 81       	ldd	r27, Y+4	; 0x04
 808:	80 3d       	cpi	r24, 0xD0	; 208
 80a:	91 05       	cpc	r25, r1
 80c:	a1 05       	cpc	r26, r1
 80e:	b1 05       	cpc	r27, r1
 810:	40 f3       	brcs	.-48     	; 0x7e2 <Lib_vDelayMs+0x2c>
	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 812:	8d 81       	ldd	r24, Y+5	; 0x05
 814:	9e 81       	ldd	r25, Y+6	; 0x06
 816:	af 81       	ldd	r26, Y+7	; 0x07
 818:	b8 85       	ldd	r27, Y+8	; 0x08
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	a1 1d       	adc	r26, r1
 81e:	b1 1d       	adc	r27, r1
 820:	8d 83       	std	Y+5, r24	; 0x05
 822:	9e 83       	std	Y+6, r25	; 0x06
 824:	af 83       	std	Y+7, r26	; 0x07
 826:	b8 87       	std	Y+8, r27	; 0x08
 828:	89 85       	ldd	r24, Y+9	; 0x09
 82a:	9a 85       	ldd	r25, Y+10	; 0x0a
 82c:	cc 01       	movw	r24, r24
 82e:	a0 e0       	ldi	r26, 0x00	; 0
 830:	b0 e0       	ldi	r27, 0x00	; 0
 832:	2d 81       	ldd	r18, Y+5	; 0x05
 834:	3e 81       	ldd	r19, Y+6	; 0x06
 836:	4f 81       	ldd	r20, Y+7	; 0x07
 838:	58 85       	ldd	r21, Y+8	; 0x08
 83a:	28 17       	cp	r18, r24
 83c:	39 07       	cpc	r19, r25
 83e:	4a 07       	cpc	r20, r26
 840:	5b 07       	cpc	r21, r27
 842:	50 f2       	brcs	.-108    	; 0x7d8 <Lib_vDelayMs+0x22>
			asm("nop");
			asm("nop");
		}
	}

}
 844:	00 00       	nop
 846:	2a 96       	adiw	r28, 0x0a	; 10
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <Lib_vDelayUs>:
/*				 the given input value of time in microseconds  */
/*  input 		-> Time value of delay                          */
/*  output		-> N/A											*/
/****************************************************************/
void Lib_vDelayUs(u16 copy_u16time)
{
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	00 d0       	rcall	.+0      	; 0x85e <Lib_vDelayUs+0x6>
 85e:	00 d0       	rcall	.+0      	; 0x860 <__stack+0x1>
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	9c 83       	std	Y+4, r25	; 0x04
 866:	8b 83       	std	Y+3, r24	; 0x03
	/* this formula is used to calculate T1, T2, T3, then       */
	/* then calculate the number of iterations needed to 		*/
	/* generate the required delay in microseconds              */
	/*----------------------------------------------------------*/

	u16 local_CountNumber = (copy_u16time - LIB_U8_TOTAL_CALCULATED) / LIB_U8_AVG_TIME_PER_ITERATION;
 868:	8b 81       	ldd	r24, Y+3	; 0x03
 86a:	9c 81       	ldd	r25, Y+4	; 0x04
 86c:	45 97       	sbiw	r24, 0x15	; 21
 86e:	9c 01       	movw	r18, r24
 870:	a9 e8       	ldi	r26, 0x89	; 137
 872:	b8 e8       	ldi	r27, 0x88	; 136
 874:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__umulhisi3>
 878:	96 95       	lsr	r25
 87a:	87 95       	ror	r24
 87c:	96 95       	lsr	r25
 87e:	87 95       	ror	r24
 880:	96 95       	lsr	r25
 882:	87 95       	ror	r24
 884:	9a 83       	std	Y+2, r25	; 0x02
 886:	89 83       	std	Y+1, r24	; 0x01

	for(;local_CountNumber > NULL; local_CountNumber--)
 888:	06 c0       	rjmp	.+12     	; 0x896 <__stack+0x37>
	{
			asm("nop");
 88a:	00 00       	nop
	for(;local_CountNumber > NULL; local_CountNumber--)
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	9a 81       	ldd	r25, Y+2	; 0x02
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	9a 83       	std	Y+2, r25	; 0x02
 894:	89 83       	std	Y+1, r24	; 0x01
 896:	89 81       	ldd	r24, Y+1	; 0x01
 898:	9a 81       	ldd	r25, Y+2	; 0x02
 89a:	89 2b       	or	r24, r25
 89c:	b1 f7       	brne	.-20     	; 0x88a <__stack+0x2b>
	}
}
 89e:	00 00       	nop
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	0f 90       	pop	r0
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

000008ae <main>:
#include "STD_Types.h"
#include "Lib_Delay.h"
#include "DIO_Interface.h"

void main (void)
{
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(DIO_PORTD, DIO_PORT_OUTPUT);
 8b6:	6f ef       	ldi	r22, 0xFF	; 255
 8b8:	83 e0       	ldi	r24, 0x03	; 3
 8ba:	0e 94 bc 02 	call	0x578	; 0x578 <DIO_u8SetPortDirection>
		while (1)
		{
		DIO_u8SetPinValue(DIO_PIN24, 1);
 8be:	61 e0       	ldi	r22, 0x01	; 1
 8c0:	88 e1       	ldi	r24, 0x18	; 24
 8c2:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 8c6:	84 ef       	ldi	r24, 0xF4	; 244
 8c8:	91 e0       	ldi	r25, 0x01	; 1
 8ca:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN24, 0);
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	88 e1       	ldi	r24, 0x18	; 24
 8d2:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 8d6:	84 ef       	ldi	r24, 0xF4	; 244
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN25, 1);
 8de:	61 e0       	ldi	r22, 0x01	; 1
 8e0:	89 e1       	ldi	r24, 0x19	; 25
 8e2:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 8e6:	84 ef       	ldi	r24, 0xF4	; 244
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN25, 0);
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	89 e1       	ldi	r24, 0x19	; 25
 8f2:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 8f6:	84 ef       	ldi	r24, 0xF4	; 244
 8f8:	91 e0       	ldi	r25, 0x01	; 1
 8fa:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN26, 1);
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	8a e1       	ldi	r24, 0x1A	; 26
 902:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 906:	84 ef       	ldi	r24, 0xF4	; 244
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN26, 0);
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	8a e1       	ldi	r24, 0x1A	; 26
 912:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 916:	84 ef       	ldi	r24, 0xF4	; 244
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN27, 1);
 91e:	61 e0       	ldi	r22, 0x01	; 1
 920:	8b e1       	ldi	r24, 0x1B	; 27
 922:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 926:	84 ef       	ldi	r24, 0xF4	; 244
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN27, 0);
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	8b e1       	ldi	r24, 0x1B	; 27
 932:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 936:	84 ef       	ldi	r24, 0xF4	; 244
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN28, 1);
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	8c e1       	ldi	r24, 0x1C	; 28
 942:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 946:	84 ef       	ldi	r24, 0xF4	; 244
 948:	91 e0       	ldi	r25, 0x01	; 1
 94a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN28, 0);
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	8c e1       	ldi	r24, 0x1C	; 28
 952:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 956:	84 ef       	ldi	r24, 0xF4	; 244
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN29, 1);
 95e:	61 e0       	ldi	r22, 0x01	; 1
 960:	8d e1       	ldi	r24, 0x1D	; 29
 962:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 966:	84 ef       	ldi	r24, 0xF4	; 244
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN29, 0);
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	8d e1       	ldi	r24, 0x1D	; 29
 972:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 976:	84 ef       	ldi	r24, 0xF4	; 244
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN30, 1);
 97e:	61 e0       	ldi	r22, 0x01	; 1
 980:	8e e1       	ldi	r24, 0x1E	; 30
 982:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 986:	84 ef       	ldi	r24, 0xF4	; 244
 988:	91 e0       	ldi	r25, 0x01	; 1
 98a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN30, 0);
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	8e e1       	ldi	r24, 0x1E	; 30
 992:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 996:	84 ef       	ldi	r24, 0xF4	; 244
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN31, 1);
 99e:	61 e0       	ldi	r22, 0x01	; 1
 9a0:	8f e1       	ldi	r24, 0x1F	; 31
 9a2:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		Lib_vDelayMs(500);
 9a6:	84 ef       	ldi	r24, 0xF4	; 244
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Lib_vDelayMs>
		DIO_u8SetPinValue(DIO_PIN31, 0);
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	8f e1       	ldi	r24, 0x1F	; 31
 9b2:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PIN24, 1);
 9b6:	83 cf       	rjmp	.-250    	; 0x8be <main+0x10>

000009b8 <__umulhisi3>:
 9b8:	a2 9f       	mul	r26, r18
 9ba:	b0 01       	movw	r22, r0
 9bc:	b3 9f       	mul	r27, r19
 9be:	c0 01       	movw	r24, r0
 9c0:	a3 9f       	mul	r26, r19
 9c2:	70 0d       	add	r23, r0
 9c4:	81 1d       	adc	r24, r1
 9c6:	11 24       	eor	r1, r1
 9c8:	91 1d       	adc	r25, r1
 9ca:	b2 9f       	mul	r27, r18
 9cc:	70 0d       	add	r23, r0
 9ce:	81 1d       	adc	r24, r1
 9d0:	11 24       	eor	r1, r1
 9d2:	91 1d       	adc	r25, r1
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
