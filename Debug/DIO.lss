
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000007c6  0000083a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000013a4  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cd2  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000028ba  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00002dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003291  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000032ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <main>
  7a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vInit>:
/* Inputs:  -> void																	*/
/* Outputs: -> void                                                      			*/
/************************************************************************************/

void DIO_vInit (void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRA = CONC_8BIT(DIO_u8_PIN0_INIT_DIR,  DIO_u8_PIN1_INIT_DIR,
  8a:	8a e3       	ldi	r24, 0x3A	; 58
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTA = CONC_8BIT(DIO_u8_PIN0_INIT_PORT_VAL,  DIO_u8_PIN1_INIT_PORT_VAL,
  92:	8b e3       	ldi	r24, 0x3B	; 59
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	fc 01       	movw	r30, r24
  98:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINA = CONC_8BIT(DIO_u8_PIN0_INIT_PIN_VAL,  DIO_u8_PIN1_INIT_PIN_VAL,
  9a:	89 e3       	ldi	r24, 0x39	; 57
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRB = CONC_8BIT(DIO_u8_PIN8_INIT_DIR ,  DIO_u8_PIN9_INIT_DIR,
  a2:	87 e3       	ldi	r24, 0x37	; 55
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTB = CONC_8BIT(DIO_u8_PIN8_INIT_PORT_VAL ,  DIO_u8_PIN9_INIT_PORT_VAL,
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINB = CONC_8BIT(DIO_u8_PIN8_INIT_PIN_VAL ,  DIO_u8_PIN9_INIT_PIN_VAL,
  b2:	86 e3       	ldi	r24, 0x36	; 54
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
/* -------------------------------> Port C <----------------------------------------*/
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_DDRC = CONC_8BIT(DIO_u8_PIN16_INIT_DIR,  DIO_u8_PIN17_INIT_DIR,
  ba:	84 e3       	ldi	r24, 0x34	; 52
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_DIR,  DIO_u8_PIN19_INIT_DIR,
								  DIO_u8_PIN20_INIT_DIR,  DIO_u8_PIN21_INIT_DIR,
								  DIO_u8_PIN22_INIT_DIR,  DIO_u8_PIN23_INIT_DIR);

	DIO_Register_PORTC = CONC_8BIT(DIO_u8_PIN16_INIT_PORT_VAL,  DIO_u8_PIN17_INIT_PORT_VAL,
  c2:	85 e3       	ldi	r24, 0x35	; 53
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_PORT_VAL,  DIO_u8_PIN19_INIT_PORT_VAL,
								  DIO_u8_PIN20_INIT_PORT_VAL,  DIO_u8_PIN21_INIT_PORT_VAL,
								  DIO_u8_PIN22_INIT_PORT_VAL,  DIO_u8_PIN23_INIT_PORT_VAL);

	DIO_Register_PINC = CONC_8BIT(DIO_u8_PIN16_INIT_PIN_VAL,  DIO_u8_PIN17_INIT_PIN_VAL,
  ca:	83 e3       	ldi	r24, 0x33	; 51
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

/* -------------------------------> Port D <----------------------------------------*/
	DIO_Register_DDRD = CONC_8BIT(DIO_u8_PIN24_INIT_DIR,  DIO_u8_PIN25_INIT_DIR,
  d2:	81 e3       	ldi	r24, 0x31	; 49
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTD = CONC_8BIT(DIO_u8_PIN24_INIT_PORT_VAL,  DIO_u8_PIN25_INIT_PORT_VAL,
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PIND = CONC_8BIT(DIO_u8_PIN24_INIT_PIN_VAL,  DIO_u8_PIN25_INIT_PIN_VAL,
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	10 82       	st	Z, r1
        #define DIO_PIN31_INIT_VALUE   DIO_PIN_INIT_VAL_LOW
      #endif

/************************************************************************************/

}
  ee:	00 00       	nop
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <DIO_u8SetPinDirection>:
/*          -> Direction (copy_u8Direction) (either 0 for input or 1 for output)	*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinDirection(u8 copy_u8PinNB, u8 copy_u8Direction)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	00 d0       	rcall	.+0      	; 0xfc <DIO_u8SetPinDirection+0x6>
  fc:	0f 92       	push	r0
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	6b 83       	std	Y+3, r22	; 0x03
/*===========================>> Local variables <<==================================*/

	u8 local_u8Error  = STD_ERROR_OK; /* ----> This is used as a return value       */
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	89 83       	std	Y+1, r24	; 0x01


	/* validates the input if it's more than maximum number of pins					*/

	if(copy_u8PinNB < DIO_MAXPINNB)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	80 32       	cpi	r24, 0x20	; 32
 10e:	08 f0       	brcs	.+2      	; 0x112 <DIO_u8SetPinDirection+0x1c>
 110:	ca c0       	rjmp	.+404    	; 0x2a6 <DIO_u8SetPinDirection+0x1b0>
	{
		switch (copy_u8Direction)
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	21 f0       	breq	.+8      	; 0x124 <DIO_u8SetPinDirection+0x2e>
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	09 f4       	brne	.+2      	; 0x122 <DIO_u8SetPinDirection+0x2c>
 120:	65 c0       	rjmp	.+202    	; 0x1ec <DIO_u8SetPinDirection+0xf6>
 122:	be c0       	rjmp	.+380    	; 0x2a0 <DIO_u8SetPinDirection+0x1aa>
		{
			case DIO_PIN_INPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	98 f4       	brcc	.+38     	; 0x150 <DIO_u8SetPinDirection+0x5a>
				{
					DIO_Register_DDRA = RESET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 12a:	8a e3       	ldi	r24, 0x3A	; 58
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	28 2f       	mov	r18, r24
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	80 5a       	subi	r24, 0xA0	; 160
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	80 95       	com	r24
 144:	28 23       	and	r18, r24
 146:	8a e3       	ldi	r24, 0x3A	; 58
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 14e:	ad c0       	rjmp	.+346    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	b0 f0       	brcs	.+44     	; 0x182 <DIO_u8SetPinDirection+0x8c>
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	98 f4       	brcc	.+38     	; 0x182 <DIO_u8SetPinDirection+0x8c>
					DIO_Register_DDRB = RESET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 15c:	87 e3       	ldi	r24, 0x37	; 55
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	28 2f       	mov	r18, r24
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	80 5a       	subi	r24, 0xA0	; 160
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	80 95       	com	r24
 176:	28 23       	and	r18, r24
 178:	87 e3       	ldi	r24, 0x37	; 55
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
 180:	34 c0       	rjmp	.+104    	; 0x1ea <DIO_u8SetPinDirection+0xf4>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	b0 f0       	brcs	.+44     	; 0x1b4 <DIO_u8SetPinDirection+0xbe>
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	88 31       	cpi	r24, 0x18	; 24
 18c:	98 f4       	brcc	.+38     	; 0x1b4 <DIO_u8SetPinDirection+0xbe>
					DIO_Register_DDRC = RESET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 18e:	84 e3       	ldi	r24, 0x34	; 52
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	28 2f       	mov	r18, r24
 198:	8a 81       	ldd	r24, Y+2	; 0x02
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	80 5a       	subi	r24, 0xA0	; 160
 1a0:	9f 4f       	sbci	r25, 0xFF	; 255
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	80 95       	com	r24
 1a8:	28 23       	and	r18, r24
 1aa:	84 e3       	ldi	r24, 0x34	; 52
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	1b c0       	rjmp	.+54     	; 0x1ea <DIO_u8SetPinDirection+0xf4>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	88 31       	cpi	r24, 0x18	; 24
 1b8:	08 f4       	brcc	.+2      	; 0x1bc <DIO_u8SetPinDirection+0xc6>
 1ba:	77 c0       	rjmp	.+238    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	80 32       	cpi	r24, 0x20	; 32
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <DIO_u8SetPinDirection+0xce>
 1c2:	73 c0       	rjmp	.+230    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	28 2f       	mov	r18, r24
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	80 5a       	subi	r24, 0xA0	; 160
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	80 95       	com	r24
 1de:	28 23       	and	r18, r24
 1e0:	81 e3       	ldi	r24, 0x31	; 49
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
				break;
 1e8:	60 c0       	rjmp	.+192    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>
 1ea:	5f c0       	rjmp	.+190    	; 0x2aa <DIO_u8SetPinDirection+0x1b4>

			case DIO_PIN_OUTPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	88 f4       	brcc	.+34     	; 0x214 <DIO_u8SetPinDirection+0x11e>
				{
					DIO_Register_DDRA = SET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 1f2:	8a e3       	ldi	r24, 0x3A	; 58
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	30 81       	ld	r19, Z
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	80 5a       	subi	r24, 0xA0	; 160
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	fc 01       	movw	r30, r24
 206:	20 81       	ld	r18, Z
 208:	8a e3       	ldi	r24, 0x3A	; 58
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	23 2b       	or	r18, r19
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 212:	4d c0       	rjmp	.+154    	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	88 30       	cpi	r24, 0x08	; 8
 218:	a0 f0       	brcs	.+40     	; 0x242 <DIO_u8SetPinDirection+0x14c>
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	80 31       	cpi	r24, 0x10	; 16
 21e:	88 f4       	brcc	.+34     	; 0x242 <DIO_u8SetPinDirection+0x14c>
					DIO_Register_DDRB = SET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 220:	87 e3       	ldi	r24, 0x37	; 55
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	30 81       	ld	r19, Z
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	80 5a       	subi	r24, 0xA0	; 160
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	fc 01       	movw	r30, r24
 234:	20 81       	ld	r18, Z
 236:	87 e3       	ldi	r24, 0x37	; 55
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	23 2b       	or	r18, r19
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	2e c0       	rjmp	.+92     	; 0x29e <DIO_u8SetPinDirection+0x1a8>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	80 31       	cpi	r24, 0x10	; 16
 246:	a0 f0       	brcs	.+40     	; 0x270 <DIO_u8SetPinDirection+0x17a>
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	88 31       	cpi	r24, 0x18	; 24
 24c:	88 f4       	brcc	.+34     	; 0x270 <DIO_u8SetPinDirection+0x17a>
					DIO_Register_DDRC = SET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 24e:	84 e3       	ldi	r24, 0x34	; 52
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	30 81       	ld	r19, Z
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	80 5a       	subi	r24, 0xA0	; 160
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	fc 01       	movw	r30, r24
 262:	20 81       	ld	r18, Z
 264:	84 e3       	ldi	r24, 0x34	; 52
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	23 2b       	or	r18, r19
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
 26e:	17 c0       	rjmp	.+46     	; 0x29e <DIO_u8SetPinDirection+0x1a8>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	88 31       	cpi	r24, 0x18	; 24
 274:	e0 f0       	brcs	.+56     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	80 32       	cpi	r24, 0x20	; 32
 27a:	c8 f4       	brcc	.+50     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 27c:	81 e3       	ldi	r24, 0x31	; 49
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	30 81       	ld	r19, Z
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	88 2f       	mov	r24, r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	80 5a       	subi	r24, 0xA0	; 160
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	fc 01       	movw	r30, r24
 290:	20 81       	ld	r18, Z
 292:	81 e3       	ldi	r24, 0x31	; 49
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	23 2b       	or	r18, r19
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
				break;
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <DIO_u8SetPinDirection+0x1b8>

			default:
				local_u8Error = STD_ERROR_NOK;
 2a0:	19 82       	std	Y+1, r1	; 0x01
				break;
 2a2:	00 00       	nop
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <DIO_u8SetPinDirection+0x1ba>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 2a6:	19 82       	std	Y+1, r1	; 0x01
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <DIO_u8SetPinDirection+0x1ba>
				break;
 2aa:	00 00       	nop
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <DIO_u8SetPinDirection+0x1ba>
				break;
 2ae:	00 00       	nop
	}

	return local_u8Error;
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <DIO_u8SetPinValue>:
/*          -> Value (copy_u8Value) (either 0 or 1)	                                */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinValue(u8 copy_u8PinNB, u8 copy_u8Value)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_u8SetPinValue+0x6>
 2c4:	0f 92       	push	r0
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	8a 83       	std	Y+2, r24	; 0x02
 2cc:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	89 83       	std	Y+1, r24	; 0x01

	/* Validates the input to check whether the user enter the
	 * correct pin number, and whether he enters the right which
	 * is not bigger than upper limit.
	 */
	if(copy_u8PinNB < DIO_MAXPINNB)
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	80 32       	cpi	r24, 0x20	; 32
 2d6:	08 f0       	brcs	.+2      	; 0x2da <DIO_u8SetPinValue+0x1c>
 2d8:	c9 c0       	rjmp	.+402    	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
	{
		switch(copy_u8Value)
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	21 f0       	breq	.+8      	; 0x2ec <DIO_u8SetPinValue+0x2e>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_u8SetPinValue+0x2c>
 2e8:	65 c0       	rjmp	.+202    	; 0x3b4 <DIO_u8SetPinValue+0xf6>
 2ea:	be c0       	rjmp	.+380    	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
		{
			case DIO_PIN_LOW:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	88 30       	cpi	r24, 0x08	; 8
 2f0:	98 f4       	brcc	.+38     	; 0x318 <DIO_u8SetPinValue+0x5a>
				{
					DIO_Register_PORTA = RESET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 2f2:	8b e3       	ldi	r24, 0x3B	; 59
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	28 2f       	mov	r18, r24
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	88 2f       	mov	r24, r24
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	80 5a       	subi	r24, 0xA0	; 160
 304:	9f 4f       	sbci	r25, 0xFF	; 255
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	80 95       	com	r24
 30c:	28 23       	and	r18, r24
 30e:	8b e3       	ldi	r24, 0x3B	; 59
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 316:	ac c0       	rjmp	.+344    	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	b0 f0       	brcs	.+44     	; 0x34a <DIO_u8SetPinValue+0x8c>
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	80 31       	cpi	r24, 0x10	; 16
 322:	98 f4       	brcc	.+38     	; 0x34a <DIO_u8SetPinValue+0x8c>
					DIO_Register_PORTB = RESET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 324:	88 e3       	ldi	r24, 0x38	; 56
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	80 81       	ld	r24, Z
 32c:	28 2f       	mov	r18, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	88 2f       	mov	r24, r24
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	80 5a       	subi	r24, 0xA0	; 160
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	80 95       	com	r24
 33e:	28 23       	and	r18, r24
 340:	88 e3       	ldi	r24, 0x38	; 56
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
 348:	34 c0       	rjmp	.+104    	; 0x3b2 <DIO_u8SetPinValue+0xf4>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	80 31       	cpi	r24, 0x10	; 16
 34e:	b0 f0       	brcs	.+44     	; 0x37c <DIO_u8SetPinValue+0xbe>
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	88 31       	cpi	r24, 0x18	; 24
 354:	98 f4       	brcc	.+38     	; 0x37c <DIO_u8SetPinValue+0xbe>
					DIO_Register_PORTC = RESET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 356:	85 e3       	ldi	r24, 0x35	; 53
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	28 2f       	mov	r18, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	88 2f       	mov	r24, r24
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	80 5a       	subi	r24, 0xA0	; 160
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	fc 01       	movw	r30, r24
 36c:	80 81       	ld	r24, Z
 36e:	80 95       	com	r24
 370:	28 23       	and	r18, r24
 372:	85 e3       	ldi	r24, 0x35	; 53
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
 37a:	1b c0       	rjmp	.+54     	; 0x3b2 <DIO_u8SetPinValue+0xf4>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	88 31       	cpi	r24, 0x18	; 24
 380:	08 f4       	brcc	.+2      	; 0x384 <DIO_u8SetPinValue+0xc6>
 382:	76 c0       	rjmp	.+236    	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	08 f0       	brcs	.+2      	; 0x38c <DIO_u8SetPinValue+0xce>
 38a:	72 c0       	rjmp	.+228    	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 38c:	82 e3       	ldi	r24, 0x32	; 50
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fc 01       	movw	r30, r24
 392:	80 81       	ld	r24, Z
 394:	28 2f       	mov	r18, r24
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	80 5a       	subi	r24, 0xA0	; 160
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	fc 01       	movw	r30, r24
 3a2:	80 81       	ld	r24, Z
 3a4:	80 95       	com	r24
 3a6:	28 23       	and	r18, r24
 3a8:	82 e3       	ldi	r24, 0x32	; 50
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
				break;
 3b0:	5f c0       	rjmp	.+190    	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
 3b2:	5e c0       	rjmp	.+188    	; 0x470 <__FUSE_REGION_LENGTH__+0x70>

			case DIO_PIN_HIGH:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	88 30       	cpi	r24, 0x08	; 8
 3b8:	88 f4       	brcc	.+34     	; 0x3dc <DIO_u8SetPinValue+0x11e>
				{
					DIO_Register_PORTA = SET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 3ba:	8b e3       	ldi	r24, 0x3B	; 59
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fc 01       	movw	r30, r24
 3c0:	30 81       	ld	r19, Z
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	80 5a       	subi	r24, 0xA0	; 160
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 81       	ld	r18, Z
 3d0:	8b e3       	ldi	r24, 0x3B	; 59
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	23 2b       	or	r18, r19
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 3da:	4c c0       	rjmp	.+152    	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	a0 f0       	brcs	.+40     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	80 31       	cpi	r24, 0x10	; 16
 3e6:	88 f4       	brcc	.+34     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
					DIO_Register_PORTB = SET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 3e8:	88 e3       	ldi	r24, 0x38	; 56
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	fc 01       	movw	r30, r24
 3ee:	30 81       	ld	r19, Z
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	88 2f       	mov	r24, r24
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	80 5a       	subi	r24, 0xA0	; 160
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 81       	ld	r18, Z
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	23 2b       	or	r18, r19
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
 408:	2e c0       	rjmp	.+92     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	80 31       	cpi	r24, 0x10	; 16
 40e:	a0 f0       	brcs	.+40     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	88 31       	cpi	r24, 0x18	; 24
 414:	88 f4       	brcc	.+34     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
					DIO_Register_PORTC = SET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 416:	85 e3       	ldi	r24, 0x35	; 53
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	fc 01       	movw	r30, r24
 41c:	30 81       	ld	r19, Z
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	88 2f       	mov	r24, r24
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	80 5a       	subi	r24, 0xA0	; 160
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	fc 01       	movw	r30, r24
 42a:	20 81       	ld	r18, Z
 42c:	85 e3       	ldi	r24, 0x35	; 53
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	23 2b       	or	r18, r19
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
 436:	17 c0       	rjmp	.+46     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	88 31       	cpi	r24, 0x18	; 24
 43c:	d8 f0       	brcs	.+54     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	80 32       	cpi	r24, 0x20	; 32
 442:	c0 f4       	brcc	.+48     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 444:	82 e3       	ldi	r24, 0x32	; 50
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	30 81       	ld	r19, Z
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	88 2f       	mov	r24, r24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	80 5a       	subi	r24, 0xA0	; 160
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	fc 01       	movw	r30, r24
 458:	20 81       	ld	r18, Z
 45a:	82 e3       	ldi	r24, 0x32	; 50
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	23 2b       	or	r18, r19
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
				break;
 464:	07 c0       	rjmp	.+14     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 466:	06 c0       	rjmp	.+12     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>

			default:
				local_u8Error = STD_ERROR_NOK;
 468:	19 82       	std	Y+1, r1	; 0x01
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
		}

	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 46c:	19 82       	std	Y+1, r1	; 0x01
 46e:	03 c0       	rjmp	.+6      	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
				break;
 470:	00 00       	nop
 472:	01 c0       	rjmp	.+2      	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
				break;
 474:	00 00       	nop
	}

	return local_u8Error;
 476:	89 81       	ldd	r24, Y+1	; 0x01
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <DIO_u8ReadPinValue>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPinValue(u8 copy_u8PinNB, u8 * copy_pu8Value)
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	00 d0       	rcall	.+0      	; 0x48a <DIO_u8ReadPinValue+0x6>
 48a:	00 d0       	rcall	.+0      	; 0x48c <DIO_u8ReadPinValue+0x8>
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	8a 83       	std	Y+2, r24	; 0x02
 492:	7c 83       	std	Y+4, r23	; 0x04
 494:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PinNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	80 32       	cpi	r24, 0x20	; 32
 49e:	08 f0       	brcs	.+2      	; 0x4a2 <DIO_u8ReadPinValue+0x1e>
 4a0:	60 c0       	rjmp	.+192    	; 0x562 <DIO_u8ReadPinValue+0xde>
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	89 2b       	or	r24, r25
 4a8:	09 f4       	brne	.+2      	; 0x4ac <DIO_u8ReadPinValue+0x28>
 4aa:	5b c0       	rjmp	.+182    	; 0x562 <DIO_u8ReadPinValue+0xde>
	{
		if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	88 30       	cpi	r24, 0x08	; 8
 4b0:	88 f4       	brcc	.+34     	; 0x4d4 <DIO_u8ReadPinValue+0x50>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINA, copy_u8PinNB);
 4b2:	89 e3       	ldi	r24, 0x39	; 57
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 81       	ld	r18, Z
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	80 5a       	subi	r24, 0xA0	; 160
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	28 23       	and	r18, r24
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	9c 81       	ldd	r25, Y+4	; 0x04
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
 4d2:	44 c0       	rjmp	.+136    	; 0x55c <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	88 30       	cpi	r24, 0x08	; 8
 4d8:	a0 f0       	brcs	.+40     	; 0x502 <DIO_u8ReadPinValue+0x7e>
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	80 31       	cpi	r24, 0x10	; 16
 4de:	88 f4       	brcc	.+34     	; 0x502 <DIO_u8ReadPinValue+0x7e>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINB, copy_u8PinNB);
 4e0:	86 e3       	ldi	r24, 0x36	; 54
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 81       	ld	r18, Z
 4e8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	80 5a       	subi	r24, 0xA0	; 160
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	fc 01       	movw	r30, r24
 4f4:	80 81       	ld	r24, Z
 4f6:	28 23       	and	r18, r24
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	9c 81       	ldd	r25, Y+4	; 0x04
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
 500:	2d c0       	rjmp	.+90     	; 0x55c <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	80 31       	cpi	r24, 0x10	; 16
 506:	a0 f0       	brcs	.+40     	; 0x530 <DIO_u8ReadPinValue+0xac>
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	88 31       	cpi	r24, 0x18	; 24
 50c:	88 f4       	brcc	.+34     	; 0x530 <DIO_u8ReadPinValue+0xac>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINC, copy_u8PinNB);
 50e:	83 e3       	ldi	r24, 0x33	; 51
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fc 01       	movw	r30, r24
 514:	20 81       	ld	r18, Z
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	88 2f       	mov	r24, r24
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	80 5a       	subi	r24, 0xA0	; 160
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	fc 01       	movw	r30, r24
 522:	80 81       	ld	r24, Z
 524:	28 23       	and	r18, r24
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	9c 81       	ldd	r25, Y+4	; 0x04
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
 52e:	16 c0       	rjmp	.+44     	; 0x55c <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	88 31       	cpi	r24, 0x18	; 24
 534:	98 f0       	brcs	.+38     	; 0x55c <DIO_u8ReadPinValue+0xd8>
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	80 32       	cpi	r24, 0x20	; 32
 53a:	80 f4       	brcc	.+32     	; 0x55c <DIO_u8ReadPinValue+0xd8>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PIND, copy_u8PinNB);
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	fc 01       	movw	r30, r24
 542:	20 81       	ld	r18, Z
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	88 2f       	mov	r24, r24
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	80 5a       	subi	r24, 0xA0	; 160
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	fc 01       	movw	r30, r24
 550:	80 81       	ld	r24, Z
 552:	28 23       	and	r18, r24
 554:	8b 81       	ldd	r24, Y+3	; 0x03
 556:	9c 81       	ldd	r25, Y+4	; 0x04
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
		}
		local_u8Error = STD_ERROR_OK;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	89 83       	std	Y+1, r24	; 0x01
 560:	01 c0       	rjmp	.+2      	; 0x564 <DIO_u8ReadPinValue+0xe0>
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 562:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 564:	89 81       	ldd	r24, Y+1	; 0x01
}
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <DIO_u8SetPortDirection>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortDirection(u8 copy_u8PortNB, u8 copy_u8Direction)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <DIO_u8SetPortDirection+0x6>
 57a:	0f 92       	push	r0
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	8a 83       	std	Y+2, r24	; 0x02
 582:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortNB < DIO_MAXPORTNB)
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	84 30       	cpi	r24, 0x04	; 4
 58c:	08 f0       	brcs	.+2      	; 0x590 <DIO_u8SetPortDirection+0x1c>
 58e:	4f c0       	rjmp	.+158    	; 0x62e <DIO_u8SetPortDirection+0xba>
	{
		switch(copy_u8Direction)
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	88 2f       	mov	r24, r24
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	21 f0       	breq	.+8      	; 0x5a2 <DIO_u8SetPortDirection+0x2e>
 59a:	8f 3f       	cpi	r24, 0xFF	; 255
 59c:	91 05       	cpc	r25, r1
 59e:	09 f1       	breq	.+66     	; 0x5e2 <DIO_u8SetPortDirection+0x6e>
 5a0:	44 c0       	rjmp	.+136    	; 0x62a <DIO_u8SetPortDirection+0xb6>
		{
			case DIO_PORT_INPUT:
				if(copy_u8PortNB == DIO_PORTA)
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	88 23       	and	r24, r24
 5a6:	29 f4       	brne	.+10     	; 0x5b2 <DIO_u8SetPortDirection+0x3e>
				{
					DIO_Register_PORTA = RESET_PORT(DIO_Register_DDRA);
 5a8:	8b e3       	ldi	r24, 0x3B	; 59
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	fc 01       	movw	r30, r24
 5ae:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = RESET_PORT(DIO_Register_DDRD);
				}
				break;
 5b0:	40 c0       	rjmp	.+128    	; 0x632 <DIO_u8SetPortDirection+0xbe>
				else if(copy_u8PortNB == DIO_PORTB)
 5b2:	8a 81       	ldd	r24, Y+2	; 0x02
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	29 f4       	brne	.+10     	; 0x5c2 <DIO_u8SetPortDirection+0x4e>
					DIO_Register_PORTB = RESET_PORT(DIO_Register_DDRB);
 5b8:	88 e3       	ldi	r24, 0x38	; 56
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	fc 01       	movw	r30, r24
 5be:	10 82       	st	Z, r1
				break;
 5c0:	38 c0       	rjmp	.+112    	; 0x632 <DIO_u8SetPortDirection+0xbe>
				else if(copy_u8PortNB == DIO_PORTC)
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	29 f4       	brne	.+10     	; 0x5d2 <DIO_u8SetPortDirection+0x5e>
					DIO_Register_PORTC = RESET_PORT(DIO_Register_DDRC);
 5c8:	85 e3       	ldi	r24, 0x35	; 53
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	fc 01       	movw	r30, r24
 5ce:	10 82       	st	Z, r1
				break;
 5d0:	30 c0       	rjmp	.+96     	; 0x632 <DIO_u8SetPortDirection+0xbe>
				else if(copy_u8PortNB == DIO_PORTD)
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	83 30       	cpi	r24, 0x03	; 3
 5d6:	69 f5       	brne	.+90     	; 0x632 <DIO_u8SetPortDirection+0xbe>
					DIO_Register_PORTD = RESET_PORT(DIO_Register_DDRD);
 5d8:	82 e3       	ldi	r24, 0x32	; 50
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	fc 01       	movw	r30, r24
 5de:	10 82       	st	Z, r1
				break;
 5e0:	28 c0       	rjmp	.+80     	; 0x632 <DIO_u8SetPortDirection+0xbe>

			case DIO_PORT_OUTPUT:
				if(copy_u8PortNB == DIO_PORTA)
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	88 23       	and	r24, r24
 5e6:	31 f4       	brne	.+12     	; 0x5f4 <DIO_u8SetPortDirection+0x80>
				{
					DIO_Register_PORTA = SET_PORT(DIO_Register_PORTA);
 5e8:	8b e3       	ldi	r24, 0x3B	; 59
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
				}
				break;
 5f2:	21 c0       	rjmp	.+66     	; 0x636 <DIO_u8SetPortDirection+0xc2>
				else if(copy_u8PortNB == DIO_PORTB)
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	31 f4       	brne	.+12     	; 0x606 <DIO_u8SetPortDirection+0x92>
					DIO_Register_PORTB = SET_PORT(DIO_Register_PORTB);
 5fa:	88 e3       	ldi	r24, 0x38	; 56
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
				break;
 604:	18 c0       	rjmp	.+48     	; 0x636 <DIO_u8SetPortDirection+0xc2>
				else if(copy_u8PortNB == DIO_PORTC)
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	31 f4       	brne	.+12     	; 0x618 <DIO_u8SetPortDirection+0xa4>
					DIO_Register_PORTC = SET_PORT(DIO_Register_PORTC);
 60c:	85 e3       	ldi	r24, 0x35	; 53
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
				break;
 616:	0f c0       	rjmp	.+30     	; 0x636 <DIO_u8SetPortDirection+0xc2>
				else if(copy_u8PortNB == DIO_PORTD)
 618:	8a 81       	ldd	r24, Y+2	; 0x02
 61a:	83 30       	cpi	r24, 0x03	; 3
 61c:	61 f4       	brne	.+24     	; 0x636 <DIO_u8SetPortDirection+0xc2>
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
 61e:	82 e3       	ldi	r24, 0x32	; 50
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18
				break;
 628:	06 c0       	rjmp	.+12     	; 0x636 <DIO_u8SetPortDirection+0xc2>

			default:
				local_u8Error = STD_ERROR_NOK;
 62a:	19 82       	std	Y+1, r1	; 0x01
 62c:	05 c0       	rjmp	.+10     	; 0x638 <DIO_u8SetPortDirection+0xc4>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 62e:	19 82       	std	Y+1, r1	; 0x01
 630:	03 c0       	rjmp	.+6      	; 0x638 <DIO_u8SetPortDirection+0xc4>
				break;
 632:	00 00       	nop
 634:	01 c0       	rjmp	.+2      	; 0x638 <DIO_u8SetPortDirection+0xc4>
				break;
 636:	00 00       	nop
	}

	return local_u8Error;
 638:	89 81       	ldd	r24, Y+1	; 0x01
}
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <DIO_u8SetPortValue>:
/*          -> Value (copy_u8Value) (from 0x00 till 0xFF)                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortValue(u8 copy_u8PortNB, u8 copy_pu8Value)
{
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	00 d0       	rcall	.+0      	; 0x64c <DIO_u8SetPortValue+0x6>
 64c:	0f 92       	push	r0
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	8a 83       	std	Y+2, r24	; 0x02
 654:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	89 83       	std	Y+1, r24	; 0x01

	if( copy_u8PortNB < DIO_MAXPORTNB )
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	84 30       	cpi	r24, 0x04	; 4
 65e:	08 f0       	brcs	.+2      	; 0x662 <DIO_u8SetPortValue+0x1c>
 660:	4f c0       	rjmp	.+158    	; 0x700 <DIO_u8SetPortValue+0xba>
	{
		switch(copy_pu8Value)
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	88 2f       	mov	r24, r24
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	21 f0       	breq	.+8      	; 0x674 <DIO_u8SetPortValue+0x2e>
 66c:	8f 3f       	cpi	r24, 0xFF	; 255
 66e:	91 05       	cpc	r25, r1
 670:	09 f1       	breq	.+66     	; 0x6b4 <DIO_u8SetPortValue+0x6e>
 672:	44 c0       	rjmp	.+136    	; 0x6fc <DIO_u8SetPortValue+0xb6>
		{
			case DIO_PORT_LOW:
				if(copy_u8PortNB == DIO_PORTA)
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	88 23       	and	r24, r24
 678:	29 f4       	brne	.+10     	; 0x684 <DIO_u8SetPortValue+0x3e>
				{
					DIO_Register_PORTA = RESET_PORT(DIO_Register_PORTA);
 67a:	8b e3       	ldi	r24, 0x3B	; 59
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	fc 01       	movw	r30, r24
 680:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
				}
				break;
 682:	40 c0       	rjmp	.+128    	; 0x704 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTB)
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	29 f4       	brne	.+10     	; 0x694 <DIO_u8SetPortValue+0x4e>
					DIO_Register_PORTB = RESET_PORT(DIO_Register_PORTB);
 68a:	88 e3       	ldi	r24, 0x38	; 56
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	fc 01       	movw	r30, r24
 690:	10 82       	st	Z, r1
				break;
 692:	38 c0       	rjmp	.+112    	; 0x704 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTC)
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	29 f4       	brne	.+10     	; 0x6a4 <DIO_u8SetPortValue+0x5e>
					DIO_Register_PORTC = RESET_PORT(DIO_Register_PORTC);
 69a:	85 e3       	ldi	r24, 0x35	; 53
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	fc 01       	movw	r30, r24
 6a0:	10 82       	st	Z, r1
				break;
 6a2:	30 c0       	rjmp	.+96     	; 0x704 <DIO_u8SetPortValue+0xbe>
				else if(copy_u8PortNB == DIO_PORTD)
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	69 f5       	brne	.+90     	; 0x704 <DIO_u8SetPortValue+0xbe>
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
 6aa:	82 e3       	ldi	r24, 0x32	; 50
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	fc 01       	movw	r30, r24
 6b0:	10 82       	st	Z, r1
				break;
 6b2:	28 c0       	rjmp	.+80     	; 0x704 <DIO_u8SetPortValue+0xbe>

			case DIO_PORT_OUTPUT:
				if(copy_u8PortNB == DIO_PORTA)
 6b4:	8a 81       	ldd	r24, Y+2	; 0x02
 6b6:	88 23       	and	r24, r24
 6b8:	31 f4       	brne	.+12     	; 0x6c6 <DIO_u8SetPortValue+0x80>
				{
					DIO_Register_PORTA = SET_PORT(DIO_Register_PORTA);
 6ba:	8b e3       	ldi	r24, 0x3B	; 59
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
				}
				break;
 6c4:	21 c0       	rjmp	.+66     	; 0x708 <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTB)
 6c6:	8a 81       	ldd	r24, Y+2	; 0x02
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	31 f4       	brne	.+12     	; 0x6d8 <DIO_u8SetPortValue+0x92>
					DIO_Register_PORTB = SET_PORT(DIO_Register_PORTB);
 6cc:	88 e3       	ldi	r24, 0x38	; 56
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	21 e0       	ldi	r18, 0x01	; 1
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
				break;
 6d6:	18 c0       	rjmp	.+48     	; 0x708 <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTC)
 6d8:	8a 81       	ldd	r24, Y+2	; 0x02
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	31 f4       	brne	.+12     	; 0x6ea <DIO_u8SetPortValue+0xa4>
					DIO_Register_PORTC = SET_PORT(DIO_Register_PORTC);
 6de:	85 e3       	ldi	r24, 0x35	; 53
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	fc 01       	movw	r30, r24
 6e6:	20 83       	st	Z, r18
				break;
 6e8:	0f c0       	rjmp	.+30     	; 0x708 <DIO_u8SetPortValue+0xc2>
				else if(copy_u8PortNB == DIO_PORTD)
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	83 30       	cpi	r24, 0x03	; 3
 6ee:	61 f4       	brne	.+24     	; 0x708 <DIO_u8SetPortValue+0xc2>
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
 6f0:	82 e3       	ldi	r24, 0x32	; 50
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	21 e0       	ldi	r18, 0x01	; 1
 6f6:	fc 01       	movw	r30, r24
 6f8:	20 83       	st	Z, r18
				break;
 6fa:	06 c0       	rjmp	.+12     	; 0x708 <DIO_u8SetPortValue+0xc2>

			default:
				local_u8Error = STD_ERROR_NOK;
 6fc:	19 82       	std	Y+1, r1	; 0x01
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <DIO_u8SetPortValue+0xc4>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 700:	19 82       	std	Y+1, r1	; 0x01
 702:	03 c0       	rjmp	.+6      	; 0x70a <DIO_u8SetPortValue+0xc4>
				break;
 704:	00 00       	nop
 706:	01 c0       	rjmp	.+2      	; 0x70a <DIO_u8SetPortValue+0xc4>
				break;
 708:	00 00       	nop
	}

	return local_u8Error;
 70a:	89 81       	ldd	r24, Y+1	; 0x01
}
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	08 95       	ret

00000718 <DIO_u8ReadPortValue>:
/*          -> Location (* copy_pu8Value)                                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPortValue(u8 copy_u8PortNB, u8 * copy_pu8Value)
{
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	00 d0       	rcall	.+0      	; 0x71e <DIO_u8ReadPortValue+0x6>
 71e:	00 d0       	rcall	.+0      	; 0x720 <DIO_u8ReadPortValue+0x8>
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
 724:	8a 83       	std	Y+2, r24	; 0x02
 726:	7c 83       	std	Y+4, r23	; 0x04
 728:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PortNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	80 32       	cpi	r24, 0x20	; 32
 732:	b0 f5       	brcc	.+108    	; 0x7a0 <DIO_u8ReadPortValue+0x88>
 734:	8b 81       	ldd	r24, Y+3	; 0x03
 736:	9c 81       	ldd	r25, Y+4	; 0x04
 738:	89 2b       	or	r24, r25
 73a:	91 f1       	breq	.+100    	; 0x7a0 <DIO_u8ReadPortValue+0x88>
		{
			if(copy_u8PortNB == DIO_PORTA)
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	88 23       	and	r24, r24
 740:	49 f4       	brne	.+18     	; 0x754 <DIO_u8ReadPortValue+0x3c>
			{
				GET_PORT(DIO_Register_PINA, * copy_pu8Value);
 742:	89 e3       	ldi	r24, 0x39	; 57
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	fc 01       	movw	r30, r24
 748:	20 81       	ld	r18, Z
 74a:	8b 81       	ldd	r24, Y+3	; 0x03
 74c:	9c 81       	ldd	r25, Y+4	; 0x04
 74e:	fc 01       	movw	r30, r24
 750:	20 83       	st	Z, r18
 752:	23 c0       	rjmp	.+70     	; 0x79a <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTB)
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	81 30       	cpi	r24, 0x01	; 1
 758:	49 f4       	brne	.+18     	; 0x76c <DIO_u8ReadPortValue+0x54>
			{
				GET_PORT(DIO_Register_PINB, * copy_pu8Value);
 75a:	86 e3       	ldi	r24, 0x36	; 54
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc 01       	movw	r30, r24
 760:	20 81       	ld	r18, Z
 762:	8b 81       	ldd	r24, Y+3	; 0x03
 764:	9c 81       	ldd	r25, Y+4	; 0x04
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18
 76a:	17 c0       	rjmp	.+46     	; 0x79a <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTC)
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	82 30       	cpi	r24, 0x02	; 2
 770:	49 f4       	brne	.+18     	; 0x784 <DIO_u8ReadPortValue+0x6c>
			{
				GET_PORT(DIO_Register_PINC, * copy_pu8Value);
 772:	83 e3       	ldi	r24, 0x33	; 51
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	fc 01       	movw	r30, r24
 778:	20 81       	ld	r18, Z
 77a:	8b 81       	ldd	r24, Y+3	; 0x03
 77c:	9c 81       	ldd	r25, Y+4	; 0x04
 77e:	fc 01       	movw	r30, r24
 780:	20 83       	st	Z, r18
 782:	0b c0       	rjmp	.+22     	; 0x79a <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTA)
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	88 23       	and	r24, r24
 788:	41 f4       	brne	.+16     	; 0x79a <DIO_u8ReadPortValue+0x82>
			{
				GET_PORT(DIO_Register_PIND, * copy_pu8Value);
 78a:	80 e3       	ldi	r24, 0x30	; 48
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	fc 01       	movw	r30, r24
 790:	20 81       	ld	r18, Z
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	9c 81       	ldd	r25, Y+4	; 0x04
 796:	fc 01       	movw	r30, r24
 798:	20 83       	st	Z, r18
			}
			local_u8Error = STD_ERROR_OK;
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	89 83       	std	Y+1, r24	; 0x01
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <DIO_u8ReadPortValue+0x8a>
		}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 7a0:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <main>:
 *  Created on: Feb 8, 2019
 *      Author: islash8
 */

void main (void)
{
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62

}
 7ba:	00 00       	nop
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
